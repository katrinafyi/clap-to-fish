Subcommand(cmd='git-branchless',
           desc='',
           dashes=[DashOptions(shorts=['-C'],
                               longs=[],
                               args=['<WORKING_DIRECTORY>'],
                               desc='Change to the given directory before executing the rest of the program. (The option is called `-C` '
                                    'for symmetry with Git.)'),
                   DashOptions(shorts=[], longs=['--color'], args=['<COLOR>'], desc='Flag to force enable or disable terminal colors'),
                   DashOptions(shorts=['-h'], longs=['--help'], args=[], desc="Print help (see a summary with '-h')"),
                   DashOptions(shorts=['-V'], longs=['--version'], args=[], desc='Print version')],
           subs=[Subcommand(cmd='amend',
                            desc='Amend the current HEAD commit',
                            dashes=[DashOptions(shorts=['-C'],
                                                longs=[],
                                                args=['<WORKING_DIRECTORY>'],
                                                desc='Change to the given directory before executing the rest of the program. (The option '
                                                     'is called `-C` for symmetry with Git.)'),
                                    DashOptions(shorts=['-f'],
                                                longs=['--force-rewrite'],
                                                args=[],
                                                desc='Force moving public commits, even though other people may have access to those '
                                                     'commits'),
                                    DashOptions(shorts=[],
                                                longs=['--color'],
                                                args=['<COLOR>'],
                                                desc='Flag to force enable or disable terminal colors'),
                                    DashOptions(shorts=[],
                                                longs=['--in-memory'],
                                                args=[],
                                                desc='Only attempt to perform an in-memory rebase. If it fails, do not attempt an on-disk '
                                                     'rebase'),
                                    DashOptions(shorts=[],
                                                longs=['--on-disk'],
                                                args=[],
                                                desc='Skip attempting to use an in-memory rebase, and try an on-disk rebase directly'),
                                    DashOptions(shorts=[],
                                                longs=['--no-deduplicate-commits'],
                                                args=[],
                                                desc="Don't attempt to deduplicate commits. Normally, a commit with the same contents as "
                                                     'another commit which has already been applied to the target branch is skipped. If '
                                                     'set, this flag skips that check'),
                                    DashOptions(shorts=['-m'],
                                                longs=['--merge'],
                                                args=[],
                                                desc='Attempt to resolve merge conflicts, if any. If a merge conflict occurs and this '
                                                     'option is not set, the operation is aborted'),
                                    DashOptions(shorts=[],
                                                longs=['--debug-dump-rebase-constraints'],
                                                args=[],
                                                desc='Debugging option. Print the constraints used to create the rebase plan before '
                                                     'executing it'),
                                    DashOptions(shorts=[],
                                                longs=['--debug-dump-rebase-plan'],
                                                args=[],
                                                desc='Debugging option. Print the rebase plan that will be executed before executing it'),
                                    DashOptions(shorts=[],
                                                longs=['--reparent'],
                                                args=[],
                                                desc='Modify the contents of the current HEAD commit, but keep all contents of descendant '
                                                     'commits exactly the same (i.e. "reparent" them). This can be useful when applying '
                                                     'formatting or refactoring changes'),
                                    DashOptions(shorts=['-h'], longs=['--help'], args=[], desc="Print help (see a summary with '-h')")],
                            subs=[],
                            args=[]),
                 Subcommand(cmd='bug-report',
                            desc='Gather information about recent operations to upload as part of a bug report',
                            dashes=[DashOptions(shorts=['-C'],
                                                longs=[],
                                                args=['<WORKING_DIRECTORY>'],
                                                desc='Change to the given directory before executing the rest of the program. (The option '
                                                     'is called `-C` for symmetry with Git.)'),
                                    DashOptions(shorts=[],
                                                longs=['--color'],
                                                args=['<COLOR>'],
                                                desc='Flag to force enable or disable terminal colors'),
                                    DashOptions(shorts=['-h'], longs=['--help'], args=[], desc="Print help (see a summary with '-h')")],
                            subs=[],
                            args=[]),
                 Subcommand(cmd='difftool',
                            desc='Use the partial commit selector UI as a Git-compatible difftool; see git-difftool(1) for more '
                                 'information on Git difftools',
                            dashes=[DashOptions(shorts=['-C'],
                                                longs=[],
                                                args=['<WORKING_DIRECTORY>'],
                                                desc='Change to the given directory before executing the rest of the program. (The option '
                                                     'is called `-C` for symmetry with Git.)'),
                                    DashOptions(shorts=['-d'],
                                                longs=['--dir-diff'],
                                                args=[],
                                                desc='Instead of comparing two files, compare two directories recursively'),
                                    DashOptions(shorts=[],
                                                longs=['--color'],
                                                args=['<COLOR>'],
                                                desc='Flag to force enable or disable terminal colors'),
                                    DashOptions(shorts=[],
                                                longs=['--read-only'],
                                                args=[],
                                                desc='Disable all editing controls and do not write the selected commit contents to disk'),
                                    DashOptions(shorts=['-N'],
                                                longs=['--dry-run'],
                                                args=[],
                                                desc='Show what would have been written to disk as part of the commit selection, but do '
                                                     'not actually write it'),
                                    DashOptions(shorts=['-b'],
                                                longs=['--base'],
                                                args=['<BASE>'],
                                                desc='Render the interface as a mergetool instead of a difftool and use this file as the '
                                                     'base of a three-way diff as part of resolving merge conflicts'),
                                    DashOptions(shorts=['-o'],
                                                longs=['--output'],
                                                args=['<OUTPUT>'],
                                                desc='Write the resolved merge conflicts to this file'),
                                    DashOptions(shorts=['-h'], longs=['--help'], args=[], desc="Print help (see a summary with '-h')")],
                            subs=[],
                            args=[('<LEFT>', 'The left-hand file to compare (or directory if `--dir-diff` is passed)'),
                                  ('<RIGHT>', 'The right-hand file to compare (or directory if `--dir-diff` is passed)')]),
                 Subcommand(cmd='gc',
                            desc='Run internal garbage collection',
                            dashes=[DashOptions(shorts=['-C'],
                                                longs=[],
                                                args=['<WORKING_DIRECTORY>'],
                                                desc='Change to the given directory before executing the rest of the program. (The option '
                                                     'is called `-C` for symmetry with Git.)'),
                                    DashOptions(shorts=[],
                                                longs=['--color'],
                                                args=['<COLOR>'],
                                                desc='Flag to force enable or disable terminal colors'),
                                    DashOptions(shorts=['-h'], longs=['--help'], args=[], desc="Print help (see a summary with '-h')")],
                            subs=[],
                            args=[]),
                 Subcommand(cmd='hide',
                            desc='Hide the provided commits from the smartlog',
                            dashes=[DashOptions(shorts=['-C'],
                                                longs=[],
                                                args=['<WORKING_DIRECTORY>'],
                                                desc='Change to the given directory before executing the rest of the program. (The option '
                                                     'is called `-C` for symmetry with Git.)'),
                                    DashOptions(shorts=[],
                                                longs=['--hidden'],
                                                args=[],
                                                desc='Include hidden commits in the results of evaluating revset expressions'),
                                    DashOptions(shorts=[],
                                                longs=['--color'],
                                                args=['<COLOR>'],
                                                desc='Flag to force enable or disable terminal colors'),
                                    DashOptions(shorts=[],
                                                longs=['--no-delete-branches'],
                                                args=[],
                                                desc="Don't delete branches that point to commits that would be hidden. (Those commits "
                                                     'will remain visible as a result.)'),
                                    DashOptions(shorts=['-r'],
                                                longs=['--recursive'],
                                                args=[],
                                                desc='Also recursively hide all visible children commits of the provided commits'),
                                    DashOptions(shorts=['-h'], longs=['--help'], args=[], desc="Print help (see a summary with '-h')")],
                            subs=[],
                            args=[('[REVSETS]...', 'Zero or more commits to hide')]),
                 Subcommand(cmd='init',
                            desc='Initialize the branchless workflow for this repository',
                            dashes=[DashOptions(shorts=['-C'],
                                                longs=[],
                                                args=['<WORKING_DIRECTORY>'],
                                                desc='Change to the given directory before executing the rest of the program. (The option '
                                                     'is called `-C` for symmetry with Git.)'),
                                    DashOptions(shorts=[],
                                                longs=['--uninstall'],
                                                args=[],
                                                desc='Uninstall the branchless workflow instead of initializing it'),
                                    DashOptions(shorts=[],
                                                longs=['--color'],
                                                args=['<COLOR>'],
                                                desc='Flag to force enable or disable terminal colors'),
                                    DashOptions(shorts=[],
                                                longs=['--main-branch'],
                                                args=['<MAIN_BRANCH_NAME>'],
                                                desc='Use the provided name as the name of the main branch.'),
                                    DashOptions(shorts=['-h'], longs=['--help'], args=[], desc="Print help (see a summary with '-h')")],
                            subs=[],
                            args=[]),
                 Subcommand(cmd='install-man-pages',
                            desc="Install git-branchless's man-pages to the given path",
                            dashes=[DashOptions(shorts=['-C'],
                                                longs=[],
                                                args=['<WORKING_DIRECTORY>'],
                                                desc='Change to the given directory before executing the rest of the program. (The option '
                                                     'is called `-C` for symmetry with Git.)'),
                                    DashOptions(shorts=[],
                                                longs=['--color'],
                                                args=['<COLOR>'],
                                                desc='Flag to force enable or disable terminal colors'),
                                    DashOptions(shorts=['-h'], longs=['--help'], args=[], desc="Print help (see a summary with '-h')")],
                            subs=[],
                            args=[('<PATH>',
                                   'The path to install to. An example path might be `/usr/share/man`. The provded path will be appended '
                                   'with `man1`, etc., as appropriate')]),
                 Subcommand(cmd='move',
                            desc='Move a subtree of commits from one location to another',
                            dashes=[DashOptions(shorts=['-C'],
                                                longs=[],
                                                args=['<WORKING_DIRECTORY>'],
                                                desc='Change to the given directory before executing the rest of the program. (The option '
                                                     'is called `-C` for symmetry with Git.)'),
                                    DashOptions(shorts=['-s'],
                                                longs=['--source'],
                                                args=['<SOURCE>'],
                                                desc='The source commit to move. This commit, and all of its descendants, will be moved'),
                                    DashOptions(shorts=['-b'],
                                                longs=['--base'],
                                                args=['<BASE>'],
                                                desc='A commit inside a subtree to move. The entire subtree, starting from the main '
                                                     'branch, will be moved, not just the commits descending from this commit'),
                                    DashOptions(shorts=[],
                                                longs=['--color'],
                                                args=['<COLOR>'],
                                                desc='Flag to force enable or disable terminal colors'),
                                    DashOptions(shorts=['-x'],
                                                longs=['--exact'],
                                                args=['<EXACT>'],
                                                desc='A set of specific commits to move. These will be removed from their current '
                                                     'locations and any unmoved children will be moved to their nearest unmoved ancestor'),
                                    DashOptions(shorts=['-d'],
                                                longs=['--dest'],
                                                args=['<DEST>'],
                                                desc='The destination commit to move all source commits onto. If not provided, defaults to '
                                                     'the current commit'),
                                    DashOptions(shorts=[],
                                                longs=['--hidden'],
                                                args=[],
                                                desc='Include hidden commits in the results of evaluating revset expressions'),
                                    DashOptions(shorts=['-f'],
                                                longs=['--force-rewrite'],
                                                args=[],
                                                desc='Force moving public commits, even though other people may have access to those '
                                                     'commits'),
                                    DashOptions(shorts=[],
                                                longs=['--in-memory'],
                                                args=[],
                                                desc='Only attempt to perform an in-memory rebase. If it fails, do not attempt an on-disk '
                                                     'rebase'),
                                    DashOptions(shorts=[],
                                                longs=['--on-disk'],
                                                args=[],
                                                desc='Skip attempting to use an in-memory rebase, and try an on-disk rebase directly'),
                                    DashOptions(shorts=[],
                                                longs=['--no-deduplicate-commits'],
                                                args=[],
                                                desc="Don't attempt to deduplicate commits. Normally, a commit with the same contents as "
                                                     'another commit which has already been applied to the target branch is skipped. If '
                                                     'set, this flag skips that check'),
                                    DashOptions(shorts=['-m'],
                                                longs=['--merge'],
                                                args=[],
                                                desc='Attempt to resolve merge conflicts, if any. If a merge conflict occurs and this '
                                                     'option is not set, the operation is aborted'),
                                    DashOptions(shorts=[],
                                                longs=['--debug-dump-rebase-constraints'],
                                                args=[],
                                                desc='Debugging option. Print the constraints used to create the rebase plan before '
                                                     'executing it'),
                                    DashOptions(shorts=[],
                                                longs=['--debug-dump-rebase-plan'],
                                                args=[],
                                                desc='Debugging option. Print the rebase plan that will be executed before executing it'),
                                    DashOptions(shorts=['-F'],
                                                longs=['--fixup'],
                                                args=[],
                                                desc='Combine the moved commits and squash them into the destination commit'),
                                    DashOptions(shorts=['-I'],
                                                longs=['--insert'],
                                                args=[],
                                                desc="Insert the subtree between the destination and it's children, if any. Only supported "
                                                     'if the moved subtree has a single head'),
                                    DashOptions(shorts=['-h'], longs=['--help'], args=[], desc="Print help (see a summary with '-h')")],
                            subs=[],
                            args=[]),
                 Subcommand(cmd='next',
                            desc='Move to a later commit in the current stack',
                            dashes=[DashOptions(shorts=['-a'], longs=['--all'], args=[], desc='Traverse as many commits as possible'),
                                    DashOptions(shorts=['-C'],
                                                longs=[],
                                                args=['<WORKING_DIRECTORY>'],
                                                desc='Change to the given directory before executing the rest of the program. (The option '
                                                     'is called `-C` for symmetry with Git.)'),
                                    DashOptions(shorts=['-b'],
                                                longs=['--branch'],
                                                args=[],
                                                desc='Move the specified number of branches rather than commits'),
                                    DashOptions(shorts=[],
                                                longs=['--color'],
                                                args=['<COLOR>'],
                                                desc='Flag to force enable or disable terminal colors'),
                                    DashOptions(shorts=['-o'],
                                                longs=['--oldest'],
                                                args=[],
                                                desc='When encountering multiple next commits, choose the oldest'),
                                    DashOptions(shorts=['-n'],
                                                longs=['--newest'],
                                                args=[],
                                                desc='When encountering multiple next commits, choose the newest'),
                                    DashOptions(shorts=['-i'],
                                                longs=['--interactive'],
                                                args=[],
                                                desc='When encountering multiple next commits, interactively prompt which to advance to'),
                                    DashOptions(shorts=['-m'],
                                                longs=['--merge'],
                                                args=[],
                                                desc='If the local changes conflict with the destination commit, attempt to merge them'),
                                    DashOptions(shorts=['-f'],
                                                longs=['--force'],
                                                args=[],
                                                desc='If the local changes conflict with the destination commit, discard them. (Use with '
                                                     'caution!)'),
                                    DashOptions(shorts=['-h'], longs=['--help'], args=[], desc="Print help (see a summary with '-h')")],
                            subs=[],
                            args=[('[NUM_COMMITS]', 'The number of commits to traverse.')]),
                 Subcommand(cmd='prev',
                            desc='Move to an earlier commit in the current stack',
                            dashes=[DashOptions(shorts=['-a'], longs=['--all'], args=[], desc='Traverse as many commits as possible'),
                                    DashOptions(shorts=['-C'],
                                                longs=[],
                                                args=['<WORKING_DIRECTORY>'],
                                                desc='Change to the given directory before executing the rest of the program. (The option '
                                                     'is called `-C` for symmetry with Git.)'),
                                    DashOptions(shorts=['-b'],
                                                longs=['--branch'],
                                                args=[],
                                                desc='Move the specified number of branches rather than commits'),
                                    DashOptions(shorts=[],
                                                longs=['--color'],
                                                args=['<COLOR>'],
                                                desc='Flag to force enable or disable terminal colors'),
                                    DashOptions(shorts=['-o'],
                                                longs=['--oldest'],
                                                args=[],
                                                desc='When encountering multiple next commits, choose the oldest'),
                                    DashOptions(shorts=['-n'],
                                                longs=['--newest'],
                                                args=[],
                                                desc='When encountering multiple next commits, choose the newest'),
                                    DashOptions(shorts=['-i'],
                                                longs=['--interactive'],
                                                args=[],
                                                desc='When encountering multiple next commits, interactively prompt which to advance to'),
                                    DashOptions(shorts=['-m'],
                                                longs=['--merge'],
                                                args=[],
                                                desc='If the local changes conflict with the destination commit, attempt to merge them'),
                                    DashOptions(shorts=['-f'],
                                                longs=['--force'],
                                                args=[],
                                                desc='If the local changes conflict with the destination commit, discard them. (Use with '
                                                     'caution!)'),
                                    DashOptions(shorts=['-h'], longs=['--help'], args=[], desc="Print help (see a summary with '-h')")],
                            subs=[],
                            args=[('[NUM_COMMITS]', 'The number of commits to traverse.')]),
                 Subcommand(cmd='query',
                            desc='Query the commit graph using the "revset" language and print matching commits',
                            dashes=[DashOptions(shorts=['-C'],
                                                longs=[],
                                                args=['<WORKING_DIRECTORY>'],
                                                desc='Change to the given directory before executing the rest of the program. (The option '
                                                     'is called `-C` for symmetry with Git.)'),
                                    DashOptions(shorts=[],
                                                longs=['--hidden'],
                                                args=[],
                                                desc='Include hidden commits in the results of evaluating revset expressions'),
                                    DashOptions(shorts=['-b'],
                                                longs=['--branches'],
                                                args=[],
                                                desc='Print the branches attached to the resulting commits, rather than the commits '
                                                     'themselves'),
                                    DashOptions(shorts=[],
                                                longs=['--color'],
                                                args=['<COLOR>'],
                                                desc='Flag to force enable or disable terminal colors'),
                                    DashOptions(shorts=['-r'],
                                                longs=['--raw'],
                                                args=[],
                                                desc='Print the OID of each matching commit, one per line. This output is stable for use '
                                                     'in scripts'),
                                    DashOptions(shorts=['-h'], longs=['--help'], args=[], desc="Print help (see a summary with '-h')")],
                            subs=[],
                            args=[('<REVSET>', 'The query to execute')]),
                 Subcommand(cmd='repair',
                            desc='Restore internal invariants by reconciling the internal operation log with the state of the Git '
                                 'repository',
                            dashes=[DashOptions(shorts=['-C'],
                                                longs=[],
                                                args=['<WORKING_DIRECTORY>'],
                                                desc='Change to the given directory before executing the rest of the program. (The option '
                                                     'is called `-C` for symmetry with Git.)'),
                                    DashOptions(shorts=[], longs=['--no-dry-run'], args=[], desc='Apply changes'),
                                    DashOptions(shorts=[],
                                                longs=['--color'],
                                                args=['<COLOR>'],
                                                desc='Flag to force enable or disable terminal colors'),
                                    DashOptions(shorts=['-h'], longs=['--help'], args=[], desc="Print help (see a summary with '-h')")],
                            subs=[],
                            args=[]),
                 Subcommand(cmd='restack',
                            desc='Fix up commits abandoned by a previous rewrite operation',
                            dashes=[DashOptions(shorts=['-C'],
                                                longs=[],
                                                args=['<WORKING_DIRECTORY>'],
                                                desc='Change to the given directory before executing the rest of the program. (The option '
                                                     'is called `-C` for symmetry with Git.)'),
                                    DashOptions(shorts=[],
                                                longs=['--hidden'],
                                                args=[],
                                                desc='Include hidden commits in the results of evaluating revset expressions'),
                                    DashOptions(shorts=[],
                                                longs=['--color'],
                                                args=['<COLOR>'],
                                                desc='Flag to force enable or disable terminal colors'),
                                    DashOptions(shorts=['-f'],
                                                longs=['--force-rewrite'],
                                                args=[],
                                                desc='Force moving public commits, even though other people may have access to those '
                                                     'commits'),
                                    DashOptions(shorts=[],
                                                longs=['--in-memory'],
                                                args=[],
                                                desc='Only attempt to perform an in-memory rebase. If it fails, do not attempt an on-disk '
                                                     'rebase'),
                                    DashOptions(shorts=[],
                                                longs=['--on-disk'],
                                                args=[],
                                                desc='Skip attempting to use an in-memory rebase, and try an on-disk rebase directly'),
                                    DashOptions(shorts=[],
                                                longs=['--no-deduplicate-commits'],
                                                args=[],
                                                desc="Don't attempt to deduplicate commits. Normally, a commit with the same contents as "
                                                     'another commit which has already been applied to the target branch is skipped. If '
                                                     'set, this flag skips that check'),
                                    DashOptions(shorts=['-m'],
                                                longs=['--merge'],
                                                args=[],
                                                desc='Attempt to resolve merge conflicts, if any. If a merge conflict occurs and this '
                                                     'option is not set, the operation is aborted'),
                                    DashOptions(shorts=[],
                                                longs=['--debug-dump-rebase-constraints'],
                                                args=[],
                                                desc='Debugging option. Print the constraints used to create the rebase plan before '
                                                     'executing it'),
                                    DashOptions(shorts=[],
                                                longs=['--debug-dump-rebase-plan'],
                                                args=[],
                                                desc='Debugging option. Print the rebase plan that will be executed before executing it'),
                                    DashOptions(shorts=['-h'], longs=['--help'], args=[], desc="Print help (see a summary with '-h')")],
                            subs=[],
                            args=[('[REVSETS]...',
                                   'The IDs of the abandoned commits whose descendants should be restacked. If not provided, all abandoned '
                                   'commits are restacked')]),
                 Subcommand(cmd='record',
                            desc='Create a commit by interactively selecting which changes to include',
                            dashes=[DashOptions(shorts=['-C'],
                                                longs=[],
                                                args=['<WORKING_DIRECTORY>'],
                                                desc='Change to the given directory before executing the rest of the program. (The option '
                                                     'is called `-C` for symmetry with Git.)'),
                                    DashOptions(shorts=['-m'],
                                                longs=['--message'],
                                                args=['<MESSAGES>'],
                                                desc='The commit message to use. If not provided, will be prompted to provide a commit '
                                                     'message interactively'),
                                    DashOptions(shorts=[],
                                                longs=['--color'],
                                                args=['<COLOR>'],
                                                desc='Flag to force enable or disable terminal colors'),
                                    DashOptions(shorts=['-i'],
                                                longs=['--interactive'],
                                                args=[],
                                                desc='Select changes to include interactively, rather than using the current '
                                                     'staged/unstaged changes'),
                                    DashOptions(shorts=['-c'],
                                                longs=['--create'],
                                                args=['<CREATE>'],
                                                desc='Create and switch to a new branch with the given name before committing'),
                                    DashOptions(shorts=['-d'],
                                                longs=['--detach'],
                                                args=[],
                                                desc='Detach the current branch before committing'),
                                    DashOptions(shorts=['-I'],
                                                longs=['--insert'],
                                                args=[],
                                                desc='Insert the new commit between the current commit and its children, if any'),
                                    DashOptions(shorts=['-s'],
                                                longs=['--stash'],
                                                args=[],
                                                desc='After making the new commit, switch back to the previous commit'),
                                    DashOptions(shorts=['-h'], longs=['--help'], args=[], desc="Print help (see a summary with '-h')")],
                            subs=[],
                            args=[]),
                 Subcommand(cmd='reword',
                            desc='Reword commits',
                            dashes=[DashOptions(shorts=['-C'],
                                                longs=[],
                                                args=['<WORKING_DIRECTORY>'],
                                                desc='Change to the given directory before executing the rest of the program. (The option '
                                                     'is called `-C` for symmetry with Git.)'),
                                    DashOptions(shorts=[],
                                                longs=['--hidden'],
                                                args=[],
                                                desc='Include hidden commits in the results of evaluating revset expressions'),
                                    DashOptions(shorts=[],
                                                longs=['--color'],
                                                args=['<COLOR>'],
                                                desc='Flag to force enable or disable terminal colors'),
                                    DashOptions(shorts=['-f'],
                                                longs=['--force-rewrite'],
                                                args=[],
                                                desc='Force rewording public commits, even though other people may have access to those '
                                                     'commits'),
                                    DashOptions(shorts=['-m'],
                                                longs=['--message'],
                                                args=['<MESSAGES>'],
                                                desc='Message to apply to commits. Multiple messages will be combined as separate '
                                                     'paragraphs, similar to `git commit`'),
                                    DashOptions(shorts=['-d'],
                                                longs=['--discard'],
                                                args=[],
                                                desc='Throw away the original commit messages.'),
                                    DashOptions(shorts=[],
                                                longs=['--fixup'],
                                                args=['<COMMIT_TO_FIXUP>'],
                                                desc='A commit to "fix up". The reworded commits will become `fixup!` commits (suitable '
                                                     'for use with `git rebase --autosquash`) targeting the supplied commit'),
                                    DashOptions(shorts=['-h'], longs=['--help'], args=[], desc="Print help (see a summary with '-h')")],
                            subs=[],
                            args=[('[REVSETS]...', 'Zero or more commits to reword')]),
                 Subcommand(cmd='smartlog',
                            desc='`smartlog` command',
                            dashes=[DashOptions(shorts=['-C'],
                                                longs=[],
                                                args=['<WORKING_DIRECTORY>'],
                                                desc='Change to the given directory before executing the rest of the program. (The option '
                                                     'is called `-C` for symmetry with Git.)'),
                                    DashOptions(shorts=[],
                                                longs=['--event-id'],
                                                args=['<EVENT_ID>'],
                                                desc='The point in time at which to show the smartlog. If not provided, renders the '
                                                     'smartlog as of the current time. If negative, is treated as an offset from the '
                                                     'current event'),
                                    DashOptions(shorts=[],
                                                longs=['--color'],
                                                args=['<COLOR>'],
                                                desc='Flag to force enable or disable terminal colors'),
                                    DashOptions(shorts=[],
                                                longs=['--reverse'],
                                                args=[],
                                                desc='Print the smartlog in the opposite of the usual order, with the latest commits first'),
                                    DashOptions(shorts=[],
                                                longs=['--exact'],
                                                args=[],
                                                desc="Don't automatically add HEAD and the main branch to the list of commits to present. "
                                                     'They will still be added if included in the revset'),
                                    DashOptions(shorts=[],
                                                longs=['--hidden'],
                                                args=[],
                                                desc='Include hidden commits in the results of evaluating revset expressions'),
                                    DashOptions(shorts=['-h'], longs=['--help'], args=[], desc="Print help (see a summary with '-h')")],
                            subs=[],
                            args=[('[REVSET]', 'The commits to render. These commits, plus any related commits, will be rendered')]),
                 Subcommand(cmd='submit',
                            desc='Push commits to a remote',
                            dashes=[DashOptions(shorts=['-C'],
                                                longs=[],
                                                args=['<WORKING_DIRECTORY>'],
                                                desc='Change to the given directory before executing the rest of the program. (The option '
                                                     'is called `-C` for symmetry with Git.)'),
                                    DashOptions(shorts=[],
                                                longs=['--hidden'],
                                                args=[],
                                                desc='Include hidden commits in the results of evaluating revset expressions'),
                                    DashOptions(shorts=[],
                                                longs=['--color'],
                                                args=['<COLOR>'],
                                                desc='Flag to force enable or disable terminal colors'),
                                    DashOptions(shorts=['-F'],
                                                longs=['--forge'],
                                                args=['<FORGE_KIND>'],
                                                desc='The Git hosting provider to use, called a "forge". If not provided, an attempt will '
                                                     'be made to automatically detect the forge used by the repository. If no forge can be '
                                                     'detected, will fall back to the "branch" forge'),
                                    DashOptions(shorts=['-c'],
                                                longs=['--create'],
                                                args=[],
                                                desc='If there is no associated remote commit or code review object for a given local '
                                                     'commit, create the remote object by pushing the local commit to the forge'),
                                    DashOptions(shorts=['-d'],
                                                longs=['--draft'],
                                                args=[],
                                                desc='If the forge supports it, create code reviews in "draft" mode'),
                                    DashOptions(shorts=['-m'],
                                                longs=['--message'],
                                                args=['<MESSAGE>'],
                                                desc='If the forge supports it, an optional message to include with the create or update '
                                                     'operation'),
                                    DashOptions(shorts=['-j'],
                                                longs=['--jobs'],
                                                args=['<NUM_JOBS>'],
                                                desc='If the forge supports it, how many jobs to execute in parallel. The value `0` '
                                                     'indicates to use all CPUs'),
                                    DashOptions(shorts=['-s'],
                                                longs=['--strategy'],
                                                args=['<EXECUTION_STRATEGY>'],
                                                desc='If the forge supports it and uses a tool that needs access to the working copy, what '
                                                     'kind of execution strategy to use'),
                                    DashOptions(shorts=['-n'],
                                                longs=['--dry-run'],
                                                args=[],
                                                desc="Don't push or create anything. Instead, report what would be pushed or created. "
                                                     '(This may still trigger fetching information from the forge.)'),
                                    DashOptions(shorts=['-h'], longs=['--help'], args=[], desc="Print help (see a summary with '-h')")],
                            subs=[],
                            args=[('[REVSETS]...',
                                   'The commits to push to the forge. Unless `--create` is passed, this will only push commits that '
                                   'already have associated remote objects on the forge')]),
                 Subcommand(cmd='switch',
                            desc='Switch to the provided branch or commit',
                            dashes=[DashOptions(shorts=['-C'],
                                                longs=[],
                                                args=['<WORKING_DIRECTORY>'],
                                                desc='Change to the given directory before executing the rest of the program. (The option '
                                                     'is called `-C` for symmetry with Git.)'),
                                    DashOptions(shorts=['-i'],
                                                longs=['--interactive'],
                                                args=[],
                                                desc='Interactively select a commit to check out'),
                                    DashOptions(shorts=['-c'],
                                                longs=['--create'],
                                                args=['<BRANCH_NAME>'],
                                                desc='When checking out the target commit, also create a branch with the provided name '
                                                     'pointing to that commit'),
                                    DashOptions(shorts=[],
                                                longs=['--color'],
                                                args=['<COLOR>'],
                                                desc='Flag to force enable or disable terminal colors'),
                                    DashOptions(shorts=['-f'],
                                                longs=['--force'],
                                                args=[],
                                                desc='Forcibly switch commits, discarding any working copy changes if necessary'),
                                    DashOptions(shorts=['-m'],
                                                longs=['--merge'],
                                                args=[],
                                                desc='If the current working copy changes do not apply cleanly to the target commit, start '
                                                     'merge conflict resolution instead of aborting'),
                                    DashOptions(shorts=['-d'],
                                                longs=['--detach'],
                                                args=[],
                                                desc='If the target is a branch, switch to that branch and immediately detach from it'),
                                    DashOptions(shorts=['-h'], longs=['--help'], args=[], desc="Print help (see a summary with '-h')")],
                            subs=[],
                            args=[('[TARGET]', 'The commit or branch to check out.')]),
                 Subcommand(cmd='sync',
                            desc='Move any local commit stacks on top of the main branch',
                            dashes=[DashOptions(shorts=['-C'],
                                                longs=[],
                                                args=['<WORKING_DIRECTORY>'],
                                                desc='Change to the given directory before executing the rest of the program. (The option '
                                                     'is called `-C` for symmetry with Git.)'),
                                    DashOptions(shorts=['-p'],
                                                longs=['--pull'],
                                                args=[],
                                                desc='Run `git fetch` to update remote references before carrying out the sync'),
                                    DashOptions(shorts=[],
                                                longs=['--color'],
                                                args=['<COLOR>'],
                                                desc='Flag to force enable or disable terminal colors'),
                                    DashOptions(shorts=['-f'],
                                                longs=['--force-rewrite'],
                                                args=[],
                                                desc='Force moving public commits, even though other people may have access to those '
                                                     'commits'),
                                    DashOptions(shorts=[],
                                                longs=['--in-memory'],
                                                args=[],
                                                desc='Only attempt to perform an in-memory rebase. If it fails, do not attempt an on-disk '
                                                     'rebase'),
                                    DashOptions(shorts=[],
                                                longs=['--on-disk'],
                                                args=[],
                                                desc='Skip attempting to use an in-memory rebase, and try an on-disk rebase directly'),
                                    DashOptions(shorts=[],
                                                longs=['--no-deduplicate-commits'],
                                                args=[],
                                                desc="Don't attempt to deduplicate commits. Normally, a commit with the same contents as "
                                                     'another commit which has already been applied to the target branch is skipped. If '
                                                     'set, this flag skips that check'),
                                    DashOptions(shorts=['-m'],
                                                longs=['--merge'],
                                                args=[],
                                                desc='Attempt to resolve merge conflicts, if any. If a merge conflict occurs and this '
                                                     'option is not set, the operation is aborted'),
                                    DashOptions(shorts=[],
                                                longs=['--debug-dump-rebase-constraints'],
                                                args=[],
                                                desc='Debugging option. Print the constraints used to create the rebase plan before '
                                                     'executing it'),
                                    DashOptions(shorts=[],
                                                longs=['--debug-dump-rebase-plan'],
                                                args=[],
                                                desc='Debugging option. Print the rebase plan that will be executed before executing it'),
                                    DashOptions(shorts=[],
                                                longs=['--hidden'],
                                                args=[],
                                                desc='Include hidden commits in the results of evaluating revset expressions'),
                                    DashOptions(shorts=['-h'], longs=['--help'], args=[], desc="Print help (see a summary with '-h')")],
                            subs=[],
                            args=[('[REVSETS]...',
                                   'The commits whose stacks will be moved on top of the main branch. If no commits are provided, all '
                                   'draft commits will be synced')]),
                 Subcommand(cmd='test',
                            desc='Run a command on each commit in a given set and aggregate the results',
                            dashes=[DashOptions(shorts=['-C'],
                                                longs=[],
                                                args=['<WORKING_DIRECTORY>'],
                                                desc='Change to the given directory before executing the rest of the program. (The option '
                                                     'is called `-C` for symmetry with Git.)'),
                                    DashOptions(shorts=[],
                                                longs=['--color'],
                                                args=['<COLOR>'],
                                                desc='Flag to force enable or disable terminal colors'),
                                    DashOptions(shorts=['-h'], longs=['--help'], args=[], desc="Print help (see a summary with '-h')")],
                            subs=[Subcommand(cmd='clean',
                                             desc='Clean any cached test results',
                                             dashes=[DashOptions(shorts=['-C'],
                                                                 longs=[],
                                                                 args=['<WORKING_DIRECTORY>'],
                                                                 desc='Change to the given directory before executing the rest of the '
                                                                      'program. (The option is called `-C` for symmetry with Git.)'),
                                                     DashOptions(shorts=[],
                                                                 longs=['--hidden'],
                                                                 args=[],
                                                                 desc='Include hidden commits in the results of evaluating revset '
                                                                      'expressions'),
                                                     DashOptions(shorts=[],
                                                                 longs=['--color'],
                                                                 args=['<COLOR>'],
                                                                 desc='Flag to force enable or disable terminal colors'),
                                                     DashOptions(shorts=['-h'],
                                                                 longs=['--help'],
                                                                 args=[],
                                                                 desc="Print help (see a summary with '-h')")],
                                             subs=[],
                                             args=[('[REVSET]', 'The set of commits whose results should be cleaned')]),
                                  Subcommand(cmd='run',
                                             desc='Run a given command on a set of commits and present the successes and failures',
                                             dashes=[DashOptions(shorts=['-C'],
                                                                 longs=[],
                                                                 args=['<WORKING_DIRECTORY>'],
                                                                 desc='Change to the given directory before executing the rest of the '
                                                                      'program. (The option is called `-C` for symmetry with Git.)'),
                                                     DashOptions(shorts=['-x'],
                                                                 longs=['--exec'],
                                                                 args=['<EXEC>'],
                                                                 desc='An ad-hoc command to execute on each commit'),
                                                     DashOptions(shorts=['-c'],
                                                                 longs=['--command'],
                                                                 args=['<COMMAND>'],
                                                                 desc='The test command alias for the command to execute on each commit. '
                                                                      'Set with `git config branchless.test.alias.<name> <command>`'),
                                                     DashOptions(shorts=[],
                                                                 longs=['--color'],
                                                                 args=['<COLOR>'],
                                                                 desc='Flag to force enable or disable terminal colors'),
                                                     DashOptions(shorts=[],
                                                                 longs=['--hidden'],
                                                                 args=[],
                                                                 desc='Include hidden commits in the results of evaluating revset '
                                                                      'expressions'),
                                                     DashOptions(shorts=['-v'],
                                                                 longs=['--verbose...'],
                                                                 args=[],
                                                                 desc='Show the test output as well'),
                                                     DashOptions(shorts=['-s'],
                                                                 longs=['--strategy'],
                                                                 args=['<STRATEGY>'],
                                                                 desc='How to execute the tests'),
                                                     DashOptions(shorts=['-S'],
                                                                 longs=['--search'],
                                                                 args=['<SEARCH>'],
                                                                 desc='Search for the first commit that fails the test command, rather '
                                                                      'than running on all commits'),
                                                     DashOptions(shorts=['-b'],
                                                                 longs=['--bisect'],
                                                                 args=[],
                                                                 desc='Shorthand for `--search binary`'),
                                                     DashOptions(shorts=[],
                                                                 longs=['--no-cache'],
                                                                 args=[],
                                                                 desc="Don't read or write to the cache when executing the test commands"),
                                                     DashOptions(shorts=['-i'],
                                                                 longs=['--interactive'],
                                                                 args=[],
                                                                 desc='Run the test command in the foreground rather than the background '
                                                                      'so that the user can interact with it'),
                                                     DashOptions(shorts=['-j'],
                                                                 longs=['--jobs'],
                                                                 args=['<JOBS>'],
                                                                 desc='How many jobs to execute in parallel. The value `0` indicates to '
                                                                      'use all CPUs'),
                                                     DashOptions(shorts=['-h'],
                                                                 longs=['--help'],
                                                                 args=[],
                                                                 desc="Print help (see a summary with '-h')")],
                                             subs=[],
                                             args=[('[REVSET]', 'The set of commits to test')]),
                                  Subcommand(cmd='show',
                                             desc='Show the results of a set of previous test runs',
                                             dashes=[DashOptions(shorts=['-C'],
                                                                 longs=[],
                                                                 args=['<WORKING_DIRECTORY>'],
                                                                 desc='Change to the given directory before executing the rest of the '
                                                                      'program. (The option is called `-C` for symmetry with Git.)'),
                                                     DashOptions(shorts=['-x'],
                                                                 longs=['--exec'],
                                                                 args=['<EXEC>'],
                                                                 desc='An ad-hoc command to execute on each commit'),
                                                     DashOptions(shorts=['-c'],
                                                                 longs=['--command'],
                                                                 args=['<COMMAND>'],
                                                                 desc='The test command alias for the command to execute on each commit. '
                                                                      'Set with `git config branchless.test.alias.<name> <command>`'),
                                                     DashOptions(shorts=[],
                                                                 longs=['--color'],
                                                                 args=['<COLOR>'],
                                                                 desc='Flag to force enable or disable terminal colors'),
                                                     DashOptions(shorts=[],
                                                                 longs=['--hidden'],
                                                                 args=[],
                                                                 desc='Include hidden commits in the results of evaluating revset '
                                                                      'expressions'),
                                                     DashOptions(shorts=['-v'],
                                                                 longs=['--verbose...'],
                                                                 args=[],
                                                                 desc='Show the test output as well'),
                                                     DashOptions(shorts=['-h'],
                                                                 longs=['--help'],
                                                                 args=[],
                                                                 desc="Print help (see a summary with '-h')")],
                                             subs=[],
                                             args=[('[REVSET]', 'The set of commits to show the test output for')]),
                                  Subcommand(cmd='fix',
                                             desc='Run a given command on a set of commits and present the successes and failures',
                                             dashes=[DashOptions(shorts=['-C'],
                                                                 longs=[],
                                                                 args=['<WORKING_DIRECTORY>'],
                                                                 desc='Change to the given directory before executing the rest of the '
                                                                      'program. (The option is called `-C` for symmetry with Git.)'),
                                                     DashOptions(shorts=['-x'],
                                                                 longs=['--exec'],
                                                                 args=['<EXEC>'],
                                                                 desc='An ad-hoc command to execute on each commit'),
                                                     DashOptions(shorts=['-c'],
                                                                 longs=['--command'],
                                                                 args=['<COMMAND>'],
                                                                 desc='The test command alias for the command to execute on each commit. '
                                                                      'Set with `git config branchless.test.alias.<name> <command>`'),
                                                     DashOptions(shorts=[],
                                                                 longs=['--color'],
                                                                 args=['<COLOR>'],
                                                                 desc='Flag to force enable or disable terminal colors'),
                                                     DashOptions(shorts=['-n'],
                                                                 longs=['--dry-run'],
                                                                 args=[],
                                                                 desc="Don't rewrite any commits. Instead, just print a summary as usual"),
                                                     DashOptions(shorts=[],
                                                                 longs=['--hidden'],
                                                                 args=[],
                                                                 desc='Include hidden commits in the results of evaluating revset '
                                                                      'expressions'),
                                                     DashOptions(shorts=['-v'],
                                                                 longs=['--verbose...'],
                                                                 args=[],
                                                                 desc='Show the test output as well'),
                                                     DashOptions(shorts=['-s'],
                                                                 longs=['--strategy'],
                                                                 args=['<STRATEGY>'],
                                                                 desc='How to execute the tests'),
                                                     DashOptions(shorts=[],
                                                                 longs=['--no-cache'],
                                                                 args=[],
                                                                 desc="Don't read or write to the cache when executing the test commands"),
                                                     DashOptions(shorts=['-j'],
                                                                 longs=['--jobs'],
                                                                 args=['<JOBS>'],
                                                                 desc='How many jobs to execute in parallel. The value `0` indicates to '
                                                                      'use all CPUs'),
                                                     DashOptions(shorts=['-f'],
                                                                 longs=['--force-rewrite'],
                                                                 args=[],
                                                                 desc='Force moving public commits, even though other people may have '
                                                                      'access to those commits'),
                                                     DashOptions(shorts=[],
                                                                 longs=['--in-memory'],
                                                                 args=[],
                                                                 desc='Only attempt to perform an in-memory rebase. If it fails, do not '
                                                                      'attempt an on-disk rebase'),
                                                     DashOptions(shorts=[],
                                                                 longs=['--on-disk'],
                                                                 args=[],
                                                                 desc='Skip attempting to use an in-memory rebase, and try an on-disk '
                                                                      'rebase directly'),
                                                     DashOptions(shorts=[],
                                                                 longs=['--no-deduplicate-commits'],
                                                                 args=[],
                                                                 desc="Don't attempt to deduplicate commits. Normally, a commit with the "
                                                                      'same contents as another commit which has already been applied to '
                                                                      'the target branch is skipped. If set, this flag skips that check'),
                                                     DashOptions(shorts=['-m'],
                                                                 longs=['--merge'],
                                                                 args=[],
                                                                 desc='Attempt to resolve merge conflicts, if any. If a merge conflict '
                                                                      'occurs and this option is not set, the operation is aborted'),
                                                     DashOptions(shorts=[],
                                                                 longs=['--debug-dump-rebase-constraints'],
                                                                 args=[],
                                                                 desc='Debugging option. Print the constraints used to create the rebase '
                                                                      'plan before executing it'),
                                                     DashOptions(shorts=[],
                                                                 longs=['--debug-dump-rebase-plan'],
                                                                 args=[],
                                                                 desc='Debugging option. Print the rebase plan that will be executed '
                                                                      'before executing it'),
                                                     DashOptions(shorts=['-h'],
                                                                 longs=['--help'],
                                                                 args=[],
                                                                 desc="Print help (see a summary with '-h')")],
                                             subs=[],
                                             args=[('[REVSET]', 'The set of commits to test')]),
                                  Subcommand(cmd='help',
                                             desc='Print this message or the help of the given subcommand(s)',
                                             dashes=[],
                                             subs=[],
                                             args=[])],
                            args=[]),
                 Subcommand(cmd='undo',
                            desc='Browse or return to a previous state of the repository',
                            dashes=[DashOptions(shorts=['-C'],
                                                longs=[],
                                                args=['<WORKING_DIRECTORY>'],
                                                desc='Change to the given directory before executing the rest of the program. (The option '
                                                     'is called `-C` for symmetry with Git.)'),
                                    DashOptions(shorts=['-i'],
                                                longs=['--interactive'],
                                                args=[],
                                                desc='Interactively browse through previous states of the repository before selecting one '
                                                     'to return to'),
                                    DashOptions(shorts=[],
                                                longs=['--color'],
                                                args=['<COLOR>'],
                                                desc='Flag to force enable or disable terminal colors'),
                                    DashOptions(shorts=['-y'],
                                                longs=['--yes'],
                                                args=[],
                                                desc='Skip confirmation and apply changes immediately'),
                                    DashOptions(shorts=['-h'], longs=['--help'], args=[], desc="Print help (see a summary with '-h')")],
                            subs=[],
                            args=[]),
                 Subcommand(cmd='unhide',
                            desc='Unhide previously-hidden commits from the smartlog',
                            dashes=[DashOptions(shorts=['-C'],
                                                longs=[],
                                                args=['<WORKING_DIRECTORY>'],
                                                desc='Change to the given directory before executing the rest of the program. (The option '
                                                     'is called `-C` for symmetry with Git.)'),
                                    DashOptions(shorts=[],
                                                longs=['--hidden'],
                                                args=[],
                                                desc='Include hidden commits in the results of evaluating revset expressions'),
                                    DashOptions(shorts=[],
                                                longs=['--color'],
                                                args=['<COLOR>'],
                                                desc='Flag to force enable or disable terminal colors'),
                                    DashOptions(shorts=['-r'],
                                                longs=['--recursive'],
                                                args=[],
                                                desc='Also recursively unhide all children commits of the provided commits'),
                                    DashOptions(shorts=['-h'], longs=['--help'], args=[], desc="Print help (see a summary with '-h')")],
                            subs=[],
                            args=[('[REVSETS]...', 'Zero or more commits to unhide')]),
                 Subcommand(cmd='wrap',
                            desc='Wrap a Git command inside a branchless transaction',
                            dashes=[DashOptions(shorts=['-C'],
                                                longs=[],
                                                args=['<WORKING_DIRECTORY>'],
                                                desc='Change to the given directory before executing the rest of the program. (The option '
                                                     'is called `-C` for symmetry with Git.)'),
                                    DashOptions(shorts=[],
                                                longs=['--git-executable'],
                                                args=['<GIT_EXECUTABLE>'],
                                                desc='The `git` executable to invoke'),
                                    DashOptions(shorts=[],
                                                longs=['--color'],
                                                args=['<COLOR>'],
                                                desc='Flag to force enable or disable terminal colors'),
                                    DashOptions(shorts=['-h'], longs=['--help'], args=[], desc="Print help (see a summary with '-h')")],
                            subs=[],
                            args=[]),
                 Subcommand(cmd='help', desc='Print this message or the help of the given subcommand(s)', dashes=[], subs=[], args=[])],
           args=[])
