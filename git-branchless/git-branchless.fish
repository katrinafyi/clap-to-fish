complete -c git-branchless -f -s C  -d 'Change to the given directory before executing the rest of the program. (The option is called `-C` for symmetry with Git.)' -ra "(__fish_complete_directories)"
complete -c git-branchless -f  -l color -d 'Flag to force enable or disable terminal colors' -r -a 'auto'"'"'	Automatically determine whether to display colors from the terminal and environment variables. This is the default behavior'"'"'
''always'"'"'	Always display terminal colors'"'"'
''never'"'"'	Never display terminal colors'"'"'
'
complete -c git-branchless -f -s h -l help -d 'Print help (see a summary with '"'"'-h'"'"')' 
complete -c git-branchless -f -s V -l version -d 'Print version' 
complete -c git-branchless -f --condition "not __fish_seen_subcommand_from "'amend bug-report difftool gc hide init install-man-pages move next prev query repair restack record reword smartlog submit switch sync test undo unhide wrap help' -a 'amend'"'"'	Amend the current HEAD commit'"'"'
''bug-report'"'"'	Gather information about recent operations to upload as part of a bug report'"'"'
''difftool'"'"'	Use the partial commit selector UI as a Git-compatible difftool; see git-difftool(1) for more information on Git difftools'"'"'
''gc'"'"'	Run internal garbage collection'"'"'
''hide'"'"'	Hide the provided commits from the smartlog'"'"'
''init'"'"'	Initialize the branchless workflow for this repository'"'"'
''install-man-pages'"'"'	Install git-branchless'"'"'"'"'"'"'"'"'s man-pages to the given path'"'"'
''move'"'"'	Move a subtree of commits from one location to another'"'"'
''next'"'"'	Move to a later commit in the current stack'"'"'
''prev'"'"'	Move to an earlier commit in the current stack'"'"'
''query'"'"'	Query the commit graph using the "revset" language and print matching commits'"'"'
''repair'"'"'	Restore internal invariants by reconciling the internal operation log with the state of the Git repository'"'"'
''restack'"'"'	Fix up commits abandoned by a previous rewrite operation'"'"'
''record'"'"'	Create a commit by interactively selecting which changes to include'"'"'
''reword'"'"'	Reword commits'"'"'
''smartlog'"'"'	`smartlog` command'"'"'
''submit'"'"'	Push commits to a remote'"'"'
''switch'"'"'	Switch to the provided branch or commit'"'"'
''sync'"'"'	Move any local commit stacks on top of the main branch'"'"'
''test'"'"'	Run a command on each commit in a given set and aggregate the results'"'"'
''undo'"'"'	Browse or return to a previous state of the repository'"'"'
''unhide'"'"'	Unhide previously-hidden commits from the smartlog'"'"'
''wrap'"'"'	Wrap a Git command inside a branchless transaction'"'"'
''help'"'"'	Print this message or the help of the given subcommand(s)'"'"'
'
complete -c git-branchless -f --condition "__fish_seen_subcommand_from amend" -a '(_myfish_complete_subcommand --fcs-set-argv0="git-branchless__amend")' 
complete -c git-branchless -f --condition "__fish_seen_subcommand_from bug-report" -a '(_myfish_complete_subcommand --fcs-set-argv0="git-branchless__bug-report")' 
complete -c git-branchless -f --condition "__fish_seen_subcommand_from difftool" -a '(_myfish_complete_subcommand --fcs-set-argv0="git-branchless__difftool")' 
complete -c git-branchless -f --condition "__fish_seen_subcommand_from gc" -a '(_myfish_complete_subcommand --fcs-set-argv0="git-branchless__gc")' 
complete -c git-branchless -f --condition "__fish_seen_subcommand_from hide" -a '(_myfish_complete_subcommand --fcs-set-argv0="git-branchless__hide")' 
complete -c git-branchless -f --condition "__fish_seen_subcommand_from init" -a '(_myfish_complete_subcommand --fcs-set-argv0="git-branchless__init")' 
complete -c git-branchless -f --condition "__fish_seen_subcommand_from install-man-pages" -a '(_myfish_complete_subcommand --fcs-set-argv0="git-branchless__install-man-pages")' 
complete -c git-branchless -f --condition "__fish_seen_subcommand_from move" -a '(_myfish_complete_subcommand --fcs-set-argv0="git-branchless__move")' 
complete -c git-branchless -f --condition "__fish_seen_subcommand_from next" -a '(_myfish_complete_subcommand --fcs-set-argv0="git-branchless__next")' 
complete -c git-branchless -f --condition "__fish_seen_subcommand_from prev" -a '(_myfish_complete_subcommand --fcs-set-argv0="git-branchless__prev")' 
complete -c git-branchless -f --condition "__fish_seen_subcommand_from query" -a '(_myfish_complete_subcommand --fcs-set-argv0="git-branchless__query")' 
complete -c git-branchless -f --condition "__fish_seen_subcommand_from repair" -a '(_myfish_complete_subcommand --fcs-set-argv0="git-branchless__repair")' 
complete -c git-branchless -f --condition "__fish_seen_subcommand_from restack" -a '(_myfish_complete_subcommand --fcs-set-argv0="git-branchless__restack")' 
complete -c git-branchless -f --condition "__fish_seen_subcommand_from record" -a '(_myfish_complete_subcommand --fcs-set-argv0="git-branchless__record")' 
complete -c git-branchless -f --condition "__fish_seen_subcommand_from reword" -a '(_myfish_complete_subcommand --fcs-set-argv0="git-branchless__reword")' 
complete -c git-branchless -f --condition "__fish_seen_subcommand_from smartlog" -a '(_myfish_complete_subcommand --fcs-set-argv0="git-branchless__smartlog")' 
complete -c git-branchless -f --condition "__fish_seen_subcommand_from submit" -a '(_myfish_complete_subcommand --fcs-set-argv0="git-branchless__submit")' 
complete -c git-branchless -f --condition "__fish_seen_subcommand_from switch" -a '(_myfish_complete_subcommand --fcs-set-argv0="git-branchless__switch")' 
complete -c git-branchless -f --condition "__fish_seen_subcommand_from sync" -a '(_myfish_complete_subcommand --fcs-set-argv0="git-branchless__sync")' 
complete -c git-branchless -f --condition "__fish_seen_subcommand_from test" -a '(_myfish_complete_subcommand --fcs-set-argv0="git-branchless__test")' 
complete -c git-branchless -f --condition "__fish_seen_subcommand_from undo" -a '(_myfish_complete_subcommand --fcs-set-argv0="git-branchless__undo")' 
complete -c git-branchless -f --condition "__fish_seen_subcommand_from unhide" -a '(_myfish_complete_subcommand --fcs-set-argv0="git-branchless__unhide")' 
complete -c git-branchless -f --condition "__fish_seen_subcommand_from wrap" -a '(_myfish_complete_subcommand --fcs-set-argv0="git-branchless__wrap")' 
complete -c git-branchless -f --condition "__fish_seen_subcommand_from help" -a '(_myfish_complete_subcommand --fcs-set-argv0="git-branchless__help")' 

complete -c git-branchless__amend -f -s C  -d 'Change to the given directory before executing the rest of the program. (The option is called `-C` for symmetry with Git.)' -ra "(__fish_complete_directories)"
complete -c git-branchless__amend -f -s f -l force-rewrite -d 'Force moving public commits, even though other people may have access to those commits' 
complete -c git-branchless__amend -f  -l color -d 'Flag to force enable or disable terminal colors' -r -a 'auto'"'"'	Automatically determine whether to display colors from the terminal and environment variables. This is the default behavior'"'"'
''always'"'"'	Always display terminal colors'"'"'
''never'"'"'	Never display terminal colors'"'"'
'
complete -c git-branchless__amend -f  -l in-memory -d 'Only attempt to perform an in-memory rebase. If it fails, do not attempt an on-disk rebase' 
complete -c git-branchless__amend -f  -l on-disk -d 'Skip attempting to use an in-memory rebase, and try an on-disk rebase directly' 
complete -c git-branchless__amend -f  -l no-deduplicate-commits -d 'Don'"'"'t attempt to deduplicate commits. Normally, a commit with the same contents as another commit which has already been applied to the target branch is skipped. If set, this flag skips that check' 
complete -c git-branchless__amend -f -s m -l merge -d 'Attempt to resolve merge conflicts, if any. If a merge conflict occurs and this option is not set, the operation is aborted' 
complete -c git-branchless__amend -f  -l debug-dump-rebase-constraints -d 'Debugging option. Print the constraints used to create the rebase plan before executing it' 
complete -c git-branchless__amend -f  -l debug-dump-rebase-plan -d 'Debugging option. Print the rebase plan that will be executed before executing it' 
complete -c git-branchless__amend -f  -l reparent -d 'Modify the contents of the current HEAD commit, but keep all contents of descendant commits exactly the same (i.e. "reparent" them). This can be useful when applying formatting or refactoring changes' 
complete -c git-branchless__amend -f -s h -l help -d 'Print help (see a summary with '"'"'-h'"'"')' 

complete -c git-branchless__bug-report -f -s C  -d 'Change to the given directory before executing the rest of the program. (The option is called `-C` for symmetry with Git.)' -ra "(__fish_complete_directories)"
complete -c git-branchless__bug-report -f  -l color -d 'Flag to force enable or disable terminal colors' -r -a 'auto'"'"'	Automatically determine whether to display colors from the terminal and environment variables. This is the default behavior'"'"'
''always'"'"'	Always display terminal colors'"'"'
''never'"'"'	Never display terminal colors'"'"'
'
complete -c git-branchless__bug-report -f -s h -l help -d 'Print help (see a summary with '"'"'-h'"'"')' 

complete -c git-branchless__difftool -f -s C  -d 'Change to the given directory before executing the rest of the program. (The option is called `-C` for symmetry with Git.)' -ra "(__fish_complete_directories)"
complete -c git-branchless__difftool -f -s d -l dir-diff -d 'Instead of comparing two files, compare two directories recursively' 
complete -c git-branchless__difftool -f  -l color -d 'Flag to force enable or disable terminal colors' -r -a 'auto'"'"'	Automatically determine whether to display colors from the terminal and environment variables. This is the default behavior'"'"'
''always'"'"'	Always display terminal colors'"'"'
''never'"'"'	Never display terminal colors'"'"'
'
complete -c git-branchless__difftool -f  -l read-only -d 'Disable all editing controls and do not write the selected commit contents to disk' 
complete -c git-branchless__difftool -f -s N -l dry-run -d 'Show what would have been written to disk as part of the commit selection, but do not actually write it' 
complete -c git-branchless__difftool -f -s b -l base -d 'Render the interface as a mergetool instead of a difftool and use this file as the base of a three-way diff as part of resolving merge conflicts' -xa "(__fish_complete_path)"
complete -c git-branchless__difftool -f -s o -l output -d 'Write the resolved merge conflicts to this file' -xa "(__fish_complete_path)"
complete -c git-branchless__difftool -f -s h -l help -d 'Print help (see a summary with '"'"'-h'"'"')' 
complete -c git-branchless__difftool -f -xa "(__fish_complete_path)"

complete -c git-branchless__gc -f -s C  -d 'Change to the given directory before executing the rest of the program. (The option is called `-C` for symmetry with Git.)' -ra "(__fish_complete_directories)"
complete -c git-branchless__gc -f  -l color -d 'Flag to force enable or disable terminal colors' -r -a 'auto'"'"'	Automatically determine whether to display colors from the terminal and environment variables. This is the default behavior'"'"'
''always'"'"'	Always display terminal colors'"'"'
''never'"'"'	Never display terminal colors'"'"'
'
complete -c git-branchless__gc -f -s h -l help -d 'Print help (see a summary with '"'"'-h'"'"')' 

complete -c git-branchless__hide -f -s C  -d 'Change to the given directory before executing the rest of the program. (The option is called `-C` for symmetry with Git.)' -ra "(__fish_complete_directories)"
complete -c git-branchless__hide -f  -l hidden -d 'Include hidden commits in the results of evaluating revset expressions' 
complete -c git-branchless__hide -f  -l color -d 'Flag to force enable or disable terminal colors' -r -a 'auto'"'"'	Automatically determine whether to display colors from the terminal and environment variables. This is the default behavior'"'"'
''always'"'"'	Always display terminal colors'"'"'
''never'"'"'	Never display terminal colors'"'"'
'
complete -c git-branchless__hide -f  -l no-delete-branches -d 'Don'"'"'t delete branches that point to commits that would be hidden. (Those commits will remain visible as a result.)' 
complete -c git-branchless__hide -f -s r -l recursive -d 'Also recursively hide all visible children commits of the provided commits' 
complete -c git-branchless__hide -f -s h -l help -d 'Print help (see a summary with '"'"'-h'"'"')' 
complete -c git-branchless__hide -f -kra '(__fish_git_commits)'

complete -c git-branchless__init -f -s C  -d 'Change to the given directory before executing the rest of the program. (The option is called `-C` for symmetry with Git.)' -ra "(__fish_complete_directories)"
complete -c git-branchless__init -f  -l uninstall -d 'Uninstall the branchless workflow instead of initializing it' 
complete -c git-branchless__init -f  -l color -d 'Flag to force enable or disable terminal colors' -r -a 'auto'"'"'	Automatically determine whether to display colors from the terminal and environment variables. This is the default behavior'"'"'
''always'"'"'	Always display terminal colors'"'"'
''never'"'"'	Never display terminal colors'"'"'
'
complete -c git-branchless__init -f  -l main-branch -d 'Use the provided name as the name of the main branch.' -r -ka '(__fish_git_branches)'
complete -c git-branchless__init -f -s h -l help -d 'Print help (see a summary with '"'"'-h'"'"')' 

complete -c git-branchless__install-man-pages -f -s C  -d 'Change to the given directory before executing the rest of the program. (The option is called `-C` for symmetry with Git.)' -ra "(__fish_complete_directories)"
complete -c git-branchless__install-man-pages -f  -l color -d 'Flag to force enable or disable terminal colors' -r -a 'auto'"'"'	Automatically determine whether to display colors from the terminal and environment variables. This is the default behavior'"'"'
''always'"'"'	Always display terminal colors'"'"'
''never'"'"'	Never display terminal colors'"'"'
'
complete -c git-branchless__install-man-pages -f -s h -l help -d 'Print help (see a summary with '"'"'-h'"'"')' 
complete -c git-branchless__install-man-pages -f -xa "(__fish_complete_path)"

complete -c git-branchless__move -f -s C  -d 'Change to the given directory before executing the rest of the program. (The option is called `-C` for symmetry with Git.)' -ra "(__fish_complete_directories)"
complete -c git-branchless__move -f -s s -l source -d 'The source commit to move. This commit, and all of its descendants, will be moved' -kra '(__fish_git_commits; __fish_git_branches)'
complete -c git-branchless__move -f -s b -l base -d 'A commit inside a subtree to move. The entire subtree, starting from the main branch, will be moved, not just the commits descending from this commit' -r -ka '(__fish_git_commits)'
complete -c git-branchless__move -f  -l color -d 'Flag to force enable or disable terminal colors' -r -a 'auto'"'"'	Automatically determine whether to display colors from the terminal and environment variables. This is the default behavior'"'"'
''always'"'"'	Always display terminal colors'"'"'
''never'"'"'	Never display terminal colors'"'"'
'
complete -c git-branchless__move -f -s x -l exact -d 'A set of specific commits to move. These will be removed from their current locations and any unmoved children will be moved to their nearest unmoved ancestor' -kra '(__fish_git_commits; __fish_git_branches)'
complete -c git-branchless__move -f -s d -l dest -d 'The destination commit to move all source commits onto. If not provided, defaults to the current commit' -kra '(__fish_git_commits; __fish_git_branches)'
complete -c git-branchless__move -f  -l hidden -d 'Include hidden commits in the results of evaluating revset expressions' 
complete -c git-branchless__move -f -s f -l force-rewrite -d 'Force moving public commits, even though other people may have access to those commits' 
complete -c git-branchless__move -f  -l in-memory -d 'Only attempt to perform an in-memory rebase. If it fails, do not attempt an on-disk rebase' 
complete -c git-branchless__move -f  -l on-disk -d 'Skip attempting to use an in-memory rebase, and try an on-disk rebase directly' 
complete -c git-branchless__move -f  -l no-deduplicate-commits -d 'Don'"'"'t attempt to deduplicate commits. Normally, a commit with the same contents as another commit which has already been applied to the target branch is skipped. If set, this flag skips that check' 
complete -c git-branchless__move -f -s m -l merge -d 'Attempt to resolve merge conflicts, if any. If a merge conflict occurs and this option is not set, the operation is aborted' 
complete -c git-branchless__move -f  -l debug-dump-rebase-constraints -d 'Debugging option. Print the constraints used to create the rebase plan before executing it' 
complete -c git-branchless__move -f  -l debug-dump-rebase-plan -d 'Debugging option. Print the rebase plan that will be executed before executing it' 
complete -c git-branchless__move -f -s F -l fixup -d 'Combine the moved commits and squash them into the destination commit' 
complete -c git-branchless__move -f -s I -l insert -d 'Insert the subtree between the destination and it'"'"'s children, if any. Only supported if the moved subtree has a single head' 
complete -c git-branchless__move -f -s h -l help -d 'Print help (see a summary with '"'"'-h'"'"')' 

complete -c git-branchless__next -f -s a -l all -d 'Traverse as many commits as possible' 
complete -c git-branchless__next -f -s C  -d 'Change to the given directory before executing the rest of the program. (The option is called `-C` for symmetry with Git.)' -ra "(__fish_complete_directories)"
complete -c git-branchless__next -f -s b -l branch -d 'Move the specified number of branches rather than commits' 
complete -c git-branchless__next -f  -l color -d 'Flag to force enable or disable terminal colors' -r -a 'auto'"'"'	Automatically determine whether to display colors from the terminal and environment variables. This is the default behavior'"'"'
''always'"'"'	Always display terminal colors'"'"'
''never'"'"'	Never display terminal colors'"'"'
'
complete -c git-branchless__next -f -s o -l oldest -d 'When encountering multiple next commits, choose the oldest' 
complete -c git-branchless__next -f -s n -l newest -d 'When encountering multiple next commits, choose the newest' 
complete -c git-branchless__next -f -s i -l interactive -d 'When encountering multiple next commits, interactively prompt which to advance to' 
complete -c git-branchless__next -f -s m -l merge -d 'If the local changes conflict with the destination commit, attempt to merge them' 
complete -c git-branchless__next -f -s f -l force -d 'If the local changes conflict with the destination commit, discard them. (Use with caution!)' 
complete -c git-branchless__next -f -s h -l help -d 'Print help (see a summary with '"'"'-h'"'"')' 
complete -c git-branchless__next -f -r

complete -c git-branchless__prev -f -s a -l all -d 'Traverse as many commits as possible' 
complete -c git-branchless__prev -f -s C  -d 'Change to the given directory before executing the rest of the program. (The option is called `-C` for symmetry with Git.)' -ra "(__fish_complete_directories)"
complete -c git-branchless__prev -f -s b -l branch -d 'Move the specified number of branches rather than commits' 
complete -c git-branchless__prev -f  -l color -d 'Flag to force enable or disable terminal colors' -r -a 'auto'"'"'	Automatically determine whether to display colors from the terminal and environment variables. This is the default behavior'"'"'
''always'"'"'	Always display terminal colors'"'"'
''never'"'"'	Never display terminal colors'"'"'
'
complete -c git-branchless__prev -f -s o -l oldest -d 'When encountering multiple next commits, choose the oldest' 
complete -c git-branchless__prev -f -s n -l newest -d 'When encountering multiple next commits, choose the newest' 
complete -c git-branchless__prev -f -s i -l interactive -d 'When encountering multiple next commits, interactively prompt which to advance to' 
complete -c git-branchless__prev -f -s m -l merge -d 'If the local changes conflict with the destination commit, attempt to merge them' 
complete -c git-branchless__prev -f -s f -l force -d 'If the local changes conflict with the destination commit, discard them. (Use with caution!)' 
complete -c git-branchless__prev -f -s h -l help -d 'Print help (see a summary with '"'"'-h'"'"')' 
complete -c git-branchless__prev -f -r

complete -c git-branchless__query -f -s C  -d 'Change to the given directory before executing the rest of the program. (The option is called `-C` for symmetry with Git.)' -ra "(__fish_complete_directories)"
complete -c git-branchless__query -f  -l hidden -d 'Include hidden commits in the results of evaluating revset expressions' 
complete -c git-branchless__query -f -s b -l branches -d 'Print the branches attached to the resulting commits, rather than the commits themselves' 
complete -c git-branchless__query -f  -l color -d 'Flag to force enable or disable terminal colors' -r -a 'auto'"'"'	Automatically determine whether to display colors from the terminal and environment variables. This is the default behavior'"'"'
''always'"'"'	Always display terminal colors'"'"'
''never'"'"'	Never display terminal colors'"'"'
'
complete -c git-branchless__query -f -s r -l raw -d 'Print the OID of each matching commit, one per line. This output is stable for use in scripts' 
complete -c git-branchless__query -f -s h -l help -d 'Print help (see a summary with '"'"'-h'"'"')' 
complete -c git-branchless__query -f -r

complete -c git-branchless__repair -f -s C  -d 'Change to the given directory before executing the rest of the program. (The option is called `-C` for symmetry with Git.)' -ra "(__fish_complete_directories)"
complete -c git-branchless__repair -f  -l no-dry-run -d 'Apply changes' 
complete -c git-branchless__repair -f  -l color -d 'Flag to force enable or disable terminal colors' -r -a 'auto'"'"'	Automatically determine whether to display colors from the terminal and environment variables. This is the default behavior'"'"'
''always'"'"'	Always display terminal colors'"'"'
''never'"'"'	Never display terminal colors'"'"'
'
complete -c git-branchless__repair -f -s h -l help -d 'Print help (see a summary with '"'"'-h'"'"')' 

complete -c git-branchless__restack -f -s C  -d 'Change to the given directory before executing the rest of the program. (The option is called `-C` for symmetry with Git.)' -ra "(__fish_complete_directories)"
complete -c git-branchless__restack -f  -l hidden -d 'Include hidden commits in the results of evaluating revset expressions' 
complete -c git-branchless__restack -f  -l color -d 'Flag to force enable or disable terminal colors' -r -a 'auto'"'"'	Automatically determine whether to display colors from the terminal and environment variables. This is the default behavior'"'"'
''always'"'"'	Always display terminal colors'"'"'
''never'"'"'	Never display terminal colors'"'"'
'
complete -c git-branchless__restack -f -s f -l force-rewrite -d 'Force moving public commits, even though other people may have access to those commits' 
complete -c git-branchless__restack -f  -l in-memory -d 'Only attempt to perform an in-memory rebase. If it fails, do not attempt an on-disk rebase' 
complete -c git-branchless__restack -f  -l on-disk -d 'Skip attempting to use an in-memory rebase, and try an on-disk rebase directly' 
complete -c git-branchless__restack -f  -l no-deduplicate-commits -d 'Don'"'"'t attempt to deduplicate commits. Normally, a commit with the same contents as another commit which has already been applied to the target branch is skipped. If set, this flag skips that check' 
complete -c git-branchless__restack -f -s m -l merge -d 'Attempt to resolve merge conflicts, if any. If a merge conflict occurs and this option is not set, the operation is aborted' 
complete -c git-branchless__restack -f  -l debug-dump-rebase-constraints -d 'Debugging option. Print the constraints used to create the rebase plan before executing it' 
complete -c git-branchless__restack -f  -l debug-dump-rebase-plan -d 'Debugging option. Print the rebase plan that will be executed before executing it' 
complete -c git-branchless__restack -f -s h -l help -d 'Print help (see a summary with '"'"'-h'"'"')' 
complete -c git-branchless__restack -f -kra '(__fish_git_commits)'

complete -c git-branchless__record -f -s C  -d 'Change to the given directory before executing the rest of the program. (The option is called `-C` for symmetry with Git.)' -ra "(__fish_complete_directories)"
complete -c git-branchless__record -f -s m -l message -d 'The commit message to use. If not provided, will be prompted to provide a commit message interactively' -r
complete -c git-branchless__record -f  -l color -d 'Flag to force enable or disable terminal colors' -r -a 'auto'"'"'	Automatically determine whether to display colors from the terminal and environment variables. This is the default behavior'"'"'
''always'"'"'	Always display terminal colors'"'"'
''never'"'"'	Never display terminal colors'"'"'
'
complete -c git-branchless__record -f -s i -l interactive -d 'Select changes to include interactively, rather than using the current staged/unstaged changes' 
complete -c git-branchless__record -f -s c -l create -d 'Create and switch to a new branch with the given name before committing' -r
complete -c git-branchless__record -f -s d -l detach -d 'Detach the current branch before committing' 
complete -c git-branchless__record -f -s I -l insert -d 'Insert the new commit between the current commit and its children, if any' 
complete -c git-branchless__record -f -s s -l stash -d 'After making the new commit, switch back to the previous commit' 
complete -c git-branchless__record -f -s h -l help -d 'Print help (see a summary with '"'"'-h'"'"')' 

complete -c git-branchless__reword -f -s C  -d 'Change to the given directory before executing the rest of the program. (The option is called `-C` for symmetry with Git.)' -ra "(__fish_complete_directories)"
complete -c git-branchless__reword -f  -l hidden -d 'Include hidden commits in the results of evaluating revset expressions' 
complete -c git-branchless__reword -f  -l color -d 'Flag to force enable or disable terminal colors' -r -a 'auto'"'"'	Automatically determine whether to display colors from the terminal and environment variables. This is the default behavior'"'"'
''always'"'"'	Always display terminal colors'"'"'
''never'"'"'	Never display terminal colors'"'"'
'
complete -c git-branchless__reword -f -s f -l force-rewrite -d 'Force rewording public commits, even though other people may have access to those commits' 
complete -c git-branchless__reword -f -s m -l message -d 'Message to apply to commits. Multiple messages will be combined as separate paragraphs, similar to `git commit`' -r
complete -c git-branchless__reword -f -s d -l discard -d 'Throw away the original commit messages.' 
complete -c git-branchless__reword -f  -l fixup -d 'A commit to "fix up". The reworded commits will become `fixup!` commits (suitable for use with `git rebase --autosquash`) targeting the supplied commit' -ka '(__fish_git_recent_commits)'
complete -c git-branchless__reword -f -s h -l help -d 'Print help (see a summary with '"'"'-h'"'"')' 
complete -c git-branchless__reword -f -kra '(__fish_git_commits)'

complete -c git-branchless__smartlog -f -s C  -d 'Change to the given directory before executing the rest of the program. (The option is called `-C` for symmetry with Git.)' -ra "(__fish_complete_directories)"
complete -c git-branchless__smartlog -f  -l event-id -d 'The point in time at which to show the smartlog. If not provided, renders the smartlog as of the current time. If negative, is treated as an offset from the current event' -r
complete -c git-branchless__smartlog -f  -l color -d 'Flag to force enable or disable terminal colors' -r -a 'auto'"'"'	Automatically determine whether to display colors from the terminal and environment variables. This is the default behavior'"'"'
''always'"'"'	Always display terminal colors'"'"'
''never'"'"'	Never display terminal colors'"'"'
'
complete -c git-branchless__smartlog -f  -l reverse -d 'Print the smartlog in the opposite of the usual order, with the latest commits first' 
complete -c git-branchless__smartlog -f  -l exact -d 'Don'"'"'t automatically add HEAD and the main branch to the list of commits to present. They will still be added if included in the revset' 
complete -c git-branchless__smartlog -f  -l hidden -d 'Include hidden commits in the results of evaluating revset expressions' 
complete -c git-branchless__smartlog -f -s h -l help -d 'Print help (see a summary with '"'"'-h'"'"')' 
complete -c git-branchless__smartlog -f -kra '(__fish_git_commits; __fish_git_branches)'

complete -c git-branchless__submit -f -s C  -d 'Change to the given directory before executing the rest of the program. (The option is called `-C` for symmetry with Git.)' -ra "(__fish_complete_directories)"
complete -c git-branchless__submit -f  -l hidden -d 'Include hidden commits in the results of evaluating revset expressions' 
complete -c git-branchless__submit -f  -l color -d 'Flag to force enable or disable terminal colors' -r -a 'auto'"'"'	Automatically determine whether to display colors from the terminal and environment variables. This is the default behavior'"'"'
''always'"'"'	Always display terminal colors'"'"'
''never'"'"'	Never display terminal colors'"'"'
'
complete -c git-branchless__submit -f -s F -l forge -d 'The Git hosting provider to use, called a "forge". If not provided, an attempt will be made to automatically detect the forge used by the repository. If no forge can be detected, will fall back to the "branch" forge' -r -a 'branch'"'"'	Force-push branches to the default push remote. You can configure the default push remote with `git config remote.pushDefault <remote>`'"'"'
''github'"'"'	Force-push branches to the remote and create a pull request for each branch using the `gh` command-line tool. WARNING: likely buggy!'"'"'
''phabricator'"'"'	Submit code reviews to Phabricator using the `arc` command-line tool'"'"'
'
complete -c git-branchless__submit -f -s c -l create -d 'If there is no associated remote commit or code review object for a given local commit, create the remote object by pushing the local commit to the forge' 
complete -c git-branchless__submit -f -s d -l draft -d 'If the forge supports it, create code reviews in "draft" mode' 
complete -c git-branchless__submit -f -s m -l message -d 'If the forge supports it, an optional message to include with the create or update operation' -r
complete -c git-branchless__submit -f -s j -l jobs -d 'If the forge supports it, how many jobs to execute in parallel. The value `0` indicates to use all CPUs' -r
complete -c git-branchless__submit -f -s s -l strategy -d 'If the forge supports it and uses a tool that needs access to the working copy, what kind of execution strategy to use' -r -a 'working-copy'"'"'	Default. Run the tests in the working copy. This requires a clean working copy. This is useful if you want to reuse build artifacts in the current directory'"'"'
''worktree'"'"'	Run the tests in a separate worktree (managed by git-branchless). This is useful if you want to run tests in parallel, or if you want to run tests on a different commit without invalidating build artifacts in the current directory, or if you want to run tests while your working copy is dirty'"'"'
'
complete -c git-branchless__submit -f -s n -l dry-run -d 'Don'"'"'t push or create anything. Instead, report what would be pushed or created. (This may still trigger fetching information from the forge.)' 
complete -c git-branchless__submit -f -s h -l help -d 'Print help (see a summary with '"'"'-h'"'"')' 
complete -c git-branchless__submit -f -kra '(__fish_git_commits)'

complete -c git-branchless__switch -f -s C  -d 'Change to the given directory before executing the rest of the program. (The option is called `-C` for symmetry with Git.)' -ra "(__fish_complete_directories)"
complete -c git-branchless__switch -f -s i -l interactive -d 'Interactively select a commit to check out' 
complete -c git-branchless__switch -f -s c -l create -d 'When checking out the target commit, also create a branch with the provided name pointing to that commit' -r -ka '(__fish_git_branches)'
complete -c git-branchless__switch -f  -l color -d 'Flag to force enable or disable terminal colors' -r -a 'auto'"'"'	Automatically determine whether to display colors from the terminal and environment variables. This is the default behavior'"'"'
''always'"'"'	Always display terminal colors'"'"'
''never'"'"'	Never display terminal colors'"'"'
'
complete -c git-branchless__switch -f -s f -l force -d 'Forcibly switch commits, discarding any working copy changes if necessary' 
complete -c git-branchless__switch -f -s m -l merge -d 'If the current working copy changes do not apply cleanly to the target commit, start merge conflict resolution instead of aborting' 
complete -c git-branchless__switch -f -s d -l detach -d 'If the target is a branch, switch to that branch and immediately detach from it' 
complete -c git-branchless__switch -f -s h -l help -d 'Print help (see a summary with '"'"'-h'"'"')' 
complete -c git-branchless__switch -f -kra '(__fish_git_branches; __fish_git_unique_remote_branches; __fish_git_heads; __fish_git_tags; __fish_git_recent_commits --all)'

complete -c git-branchless__sync -f -s C  -d 'Change to the given directory before executing the rest of the program. (The option is called `-C` for symmetry with Git.)' -ra "(__fish_complete_directories)"
complete -c git-branchless__sync -f -s p -l pull -d 'Run `git fetch` to update remote references before carrying out the sync' 
complete -c git-branchless__sync -f  -l color -d 'Flag to force enable or disable terminal colors' -r -a 'auto'"'"'	Automatically determine whether to display colors from the terminal and environment variables. This is the default behavior'"'"'
''always'"'"'	Always display terminal colors'"'"'
''never'"'"'	Never display terminal colors'"'"'
'
complete -c git-branchless__sync -f -s f -l force-rewrite -d 'Force moving public commits, even though other people may have access to those commits' 
complete -c git-branchless__sync -f  -l in-memory -d 'Only attempt to perform an in-memory rebase. If it fails, do not attempt an on-disk rebase' 
complete -c git-branchless__sync -f  -l on-disk -d 'Skip attempting to use an in-memory rebase, and try an on-disk rebase directly' 
complete -c git-branchless__sync -f  -l no-deduplicate-commits -d 'Don'"'"'t attempt to deduplicate commits. Normally, a commit with the same contents as another commit which has already been applied to the target branch is skipped. If set, this flag skips that check' 
complete -c git-branchless__sync -f -s m -l merge -d 'Attempt to resolve merge conflicts, if any. If a merge conflict occurs and this option is not set, the operation is aborted' 
complete -c git-branchless__sync -f  -l debug-dump-rebase-constraints -d 'Debugging option. Print the constraints used to create the rebase plan before executing it' 
complete -c git-branchless__sync -f  -l debug-dump-rebase-plan -d 'Debugging option. Print the rebase plan that will be executed before executing it' 
complete -c git-branchless__sync -f  -l hidden -d 'Include hidden commits in the results of evaluating revset expressions' 
complete -c git-branchless__sync -f -s h -l help -d 'Print help (see a summary with '"'"'-h'"'"')' 
complete -c git-branchless__sync -f -kra '(__fish_git_commits)'

complete -c git-branchless__test -f -s C  -d 'Change to the given directory before executing the rest of the program. (The option is called `-C` for symmetry with Git.)' -ra "(__fish_complete_directories)"
complete -c git-branchless__test -f  -l color -d 'Flag to force enable or disable terminal colors' -r -a 'auto'"'"'	Automatically determine whether to display colors from the terminal and environment variables. This is the default behavior'"'"'
''always'"'"'	Always display terminal colors'"'"'
''never'"'"'	Never display terminal colors'"'"'
'
complete -c git-branchless__test -f -s h -l help -d 'Print help (see a summary with '"'"'-h'"'"')' 
complete -c git-branchless__test -f --condition "not __fish_seen_subcommand_from "'clean run show fix help' -a 'clean'"'"'	Clean any cached test results'"'"'
''run'"'"'	Run a given command on a set of commits and present the successes and failures'"'"'
''show'"'"'	Show the results of a set of previous test runs'"'"'
''fix'"'"'	Run a given command on a set of commits and present the successes and failures'"'"'
''help'"'"'	Print this message or the help of the given subcommand(s)'"'"'
'
complete -c git-branchless__test -f --condition "__fish_seen_subcommand_from clean" -a '(_myfish_complete_subcommand --fcs-set-argv0="git-branchless__test__clean")' 
complete -c git-branchless__test -f --condition "__fish_seen_subcommand_from run" -a '(_myfish_complete_subcommand --fcs-set-argv0="git-branchless__test__run")' 
complete -c git-branchless__test -f --condition "__fish_seen_subcommand_from show" -a '(_myfish_complete_subcommand --fcs-set-argv0="git-branchless__test__show")' 
complete -c git-branchless__test -f --condition "__fish_seen_subcommand_from fix" -a '(_myfish_complete_subcommand --fcs-set-argv0="git-branchless__test__fix")' 
complete -c git-branchless__test -f --condition "__fish_seen_subcommand_from help" -a '(_myfish_complete_subcommand --fcs-set-argv0="git-branchless__test__help")' 

complete -c git-branchless__test__clean -f -s C  -d 'Change to the given directory before executing the rest of the program. (The option is called `-C` for symmetry with Git.)' -ra "(__fish_complete_directories)"
complete -c git-branchless__test__clean -f  -l hidden -d 'Include hidden commits in the results of evaluating revset expressions' 
complete -c git-branchless__test__clean -f  -l color -d 'Flag to force enable or disable terminal colors' -r -a 'auto'"'"'	Automatically determine whether to display colors from the terminal and environment variables. This is the default behavior'"'"'
''always'"'"'	Always display terminal colors'"'"'
''never'"'"'	Never display terminal colors'"'"'
'
complete -c git-branchless__test__clean -f -s h -l help -d 'Print help (see a summary with '"'"'-h'"'"')' 
complete -c git-branchless__test__clean -f -kra '(__fish_git_commits; __fish_git_branches)'

complete -c git-branchless__test__run -f -s C  -d 'Change to the given directory before executing the rest of the program. (The option is called `-C` for symmetry with Git.)' -ra "(__fish_complete_directories)"
complete -c git-branchless__test__run -f -s x -l exec -d 'An ad-hoc command to execute on each commit' -r
complete -c git-branchless__test__run -f -s c -l command -d 'The test command alias for the command to execute on each commit. Set with `git config branchless.test.alias.<name> <command>`' -r
complete -c git-branchless__test__run -f  -l color -d 'Flag to force enable or disable terminal colors' -r -a 'auto'"'"'	Automatically determine whether to display colors from the terminal and environment variables. This is the default behavior'"'"'
''always'"'"'	Always display terminal colors'"'"'
''never'"'"'	Never display terminal colors'"'"'
'
complete -c git-branchless__test__run -f  -l hidden -d 'Include hidden commits in the results of evaluating revset expressions' 
complete -c git-branchless__test__run -f -s v -l verbose -d 'Show the test output as well' 
complete -c git-branchless__test__run -f -s s -l strategy -d 'How to execute the tests' -r -a 'working-copy'"'"'	Default. Run the tests in the working copy. This requires a clean working copy. This is useful if you want to reuse build artifacts in the current directory'"'"'
''worktree'"'"'	Run the tests in a separate worktree (managed by git-branchless). This is useful if you want to run tests in parallel, or if you want to run tests on a different commit without invalidating build artifacts in the current directory, or if you want to run tests while your working copy is dirty'"'"'
'
complete -c git-branchless__test__run -f -s S -l search -d 'Search for the first commit that fails the test command, rather than running on all commits' -r -a 'linear'"'"'	Visit commits starting from the earliest commit and exit early when a failing commit is found'"'"'
''reverse'"'"'	Visit commits starting from the latest commit and exit early when a passing commit is found'"'"'
''binary'"'"'	Visit commits starting from the middle of the commit graph and exit early when a failing commit is found'"'"'
'
complete -c git-branchless__test__run -f -s b -l bisect -d 'Shorthand for `--search binary`' 
complete -c git-branchless__test__run -f  -l no-cache -d 'Don'"'"'t read or write to the cache when executing the test commands' 
complete -c git-branchless__test__run -f -s i -l interactive -d 'Run the test command in the foreground rather than the background so that the user can interact with it' 
complete -c git-branchless__test__run -f -s j -l jobs -d 'How many jobs to execute in parallel. The value `0` indicates to use all CPUs' -r
complete -c git-branchless__test__run -f -s h -l help -d 'Print help (see a summary with '"'"'-h'"'"')' 
complete -c git-branchless__test__run -f -kra '(__fish_git_commits; __fish_git_branches)'

complete -c git-branchless__test__show -f -s C  -d 'Change to the given directory before executing the rest of the program. (The option is called `-C` for symmetry with Git.)' -ra "(__fish_complete_directories)"
complete -c git-branchless__test__show -f -s x -l exec -d 'An ad-hoc command to execute on each commit' -r
complete -c git-branchless__test__show -f -s c -l command -d 'The test command alias for the command to execute on each commit. Set with `git config branchless.test.alias.<name> <command>`' -r
complete -c git-branchless__test__show -f  -l color -d 'Flag to force enable or disable terminal colors' -r -a 'auto'"'"'	Automatically determine whether to display colors from the terminal and environment variables. This is the default behavior'"'"'
''always'"'"'	Always display terminal colors'"'"'
''never'"'"'	Never display terminal colors'"'"'
'
complete -c git-branchless__test__show -f  -l hidden -d 'Include hidden commits in the results of evaluating revset expressions' 
complete -c git-branchless__test__show -f -s v -l verbose -d 'Show the test output as well' 
complete -c git-branchless__test__show -f -s h -l help -d 'Print help (see a summary with '"'"'-h'"'"')' 
complete -c git-branchless__test__show -f -kra '(__fish_git_commits; __fish_git_branches)'

complete -c git-branchless__test__fix -f -s C  -d 'Change to the given directory before executing the rest of the program. (The option is called `-C` for symmetry with Git.)' -ra "(__fish_complete_directories)"
complete -c git-branchless__test__fix -f -s x -l exec -d 'An ad-hoc command to execute on each commit' -r
complete -c git-branchless__test__fix -f -s c -l command -d 'The test command alias for the command to execute on each commit. Set with `git config branchless.test.alias.<name> <command>`' -r
complete -c git-branchless__test__fix -f  -l color -d 'Flag to force enable or disable terminal colors' -r -a 'auto'"'"'	Automatically determine whether to display colors from the terminal and environment variables. This is the default behavior'"'"'
''always'"'"'	Always display terminal colors'"'"'
''never'"'"'	Never display terminal colors'"'"'
'
complete -c git-branchless__test__fix -f -s n -l dry-run -d 'Don'"'"'t rewrite any commits. Instead, just print a summary as usual' 
complete -c git-branchless__test__fix -f  -l hidden -d 'Include hidden commits in the results of evaluating revset expressions' 
complete -c git-branchless__test__fix -f -s v -l verbose -d 'Show the test output as well' 
complete -c git-branchless__test__fix -f -s s -l strategy -d 'How to execute the tests' -r -a 'working-copy'"'"'	Default. Run the tests in the working copy. This requires a clean working copy. This is useful if you want to reuse build artifacts in the current directory'"'"'
''worktree'"'"'	Run the tests in a separate worktree (managed by git-branchless). This is useful if you want to run tests in parallel, or if you want to run tests on a different commit without invalidating build artifacts in the current directory, or if you want to run tests while your working copy is dirty'"'"'
'
complete -c git-branchless__test__fix -f  -l no-cache -d 'Don'"'"'t read or write to the cache when executing the test commands' 
complete -c git-branchless__test__fix -f -s j -l jobs -d 'How many jobs to execute in parallel. The value `0` indicates to use all CPUs' -r
complete -c git-branchless__test__fix -f -s f -l force-rewrite -d 'Force moving public commits, even though other people may have access to those commits' 
complete -c git-branchless__test__fix -f  -l in-memory -d 'Only attempt to perform an in-memory rebase. If it fails, do not attempt an on-disk rebase' 
complete -c git-branchless__test__fix -f  -l on-disk -d 'Skip attempting to use an in-memory rebase, and try an on-disk rebase directly' 
complete -c git-branchless__test__fix -f  -l no-deduplicate-commits -d 'Don'"'"'t attempt to deduplicate commits. Normally, a commit with the same contents as another commit which has already been applied to the target branch is skipped. If set, this flag skips that check' 
complete -c git-branchless__test__fix -f -s m -l merge -d 'Attempt to resolve merge conflicts, if any. If a merge conflict occurs and this option is not set, the operation is aborted' 
complete -c git-branchless__test__fix -f  -l debug-dump-rebase-constraints -d 'Debugging option. Print the constraints used to create the rebase plan before executing it' 
complete -c git-branchless__test__fix -f  -l debug-dump-rebase-plan -d 'Debugging option. Print the rebase plan that will be executed before executing it' 
complete -c git-branchless__test__fix -f -s h -l help -d 'Print help (see a summary with '"'"'-h'"'"')' 
complete -c git-branchless__test__fix -f -kra '(__fish_git_commits; __fish_git_branches)'


complete -c git-branchless__undo -f -s C  -d 'Change to the given directory before executing the rest of the program. (The option is called `-C` for symmetry with Git.)' -ra "(__fish_complete_directories)"
complete -c git-branchless__undo -f -s i -l interactive -d 'Interactively browse through previous states of the repository before selecting one to return to' 
complete -c git-branchless__undo -f  -l color -d 'Flag to force enable or disable terminal colors' -r -a 'auto'"'"'	Automatically determine whether to display colors from the terminal and environment variables. This is the default behavior'"'"'
''always'"'"'	Always display terminal colors'"'"'
''never'"'"'	Never display terminal colors'"'"'
'
complete -c git-branchless__undo -f -s y -l yes -d 'Skip confirmation and apply changes immediately' 
complete -c git-branchless__undo -f -s h -l help -d 'Print help (see a summary with '"'"'-h'"'"')' 

complete -c git-branchless__unhide -f -s C  -d 'Change to the given directory before executing the rest of the program. (The option is called `-C` for symmetry with Git.)' -ra "(__fish_complete_directories)"
complete -c git-branchless__unhide -f  -l hidden -d 'Include hidden commits in the results of evaluating revset expressions' 
complete -c git-branchless__unhide -f  -l color -d 'Flag to force enable or disable terminal colors' -r -a 'auto'"'"'	Automatically determine whether to display colors from the terminal and environment variables. This is the default behavior'"'"'
''always'"'"'	Always display terminal colors'"'"'
''never'"'"'	Never display terminal colors'"'"'
'
complete -c git-branchless__unhide -f -s r -l recursive -d 'Also recursively unhide all children commits of the provided commits' 
complete -c git-branchless__unhide -f -s h -l help -d 'Print help (see a summary with '"'"'-h'"'"')' 
complete -c git-branchless__unhide -f -kra '(__fish_git_commits)'

complete -c git-branchless__wrap -f -s C  -d 'Change to the given directory before executing the rest of the program. (The option is called `-C` for symmetry with Git.)' -ra "(__fish_complete_directories)"
complete -c git-branchless__wrap -f  -l git-executable -d 'The `git` executable to invoke' -xa "(__fish_complete_path)"
complete -c git-branchless__wrap -f  -l color -d 'Flag to force enable or disable terminal colors' -r -a 'auto'"'"'	Automatically determine whether to display colors from the terminal and environment variables. This is the default behavior'"'"'
''always'"'"'	Always display terminal colors'"'"'
''never'"'"'	Never display terminal colors'"'"'
'
complete -c git-branchless__wrap -f -s h -l help -d 'Print help (see a summary with '"'"'-h'"'"')' 

complete -c git -f -s C  -d 'Change to the given directory before executing the rest of the program. (The option is called `-C` for symmetry with Git.)' -ra "(__fish_complete_directories)"
complete -c git -f  -l color -d 'Flag to force enable or disable terminal colors' -r -a 'auto'"'"'	Automatically determine whether to display colors from the terminal and environment variables. This is the default behavior'"'"'
''always'"'"'	Always display terminal colors'"'"'
''never'"'"'	Never display terminal colors'"'"'
'
complete -c git -f -s h -l help -d 'Print help (see a summary with '"'"'-h'"'"')' 
complete -c git -f -s V -l version -d 'Print version' 
complete -c git -f --condition "not __fish_seen_subcommand_from "'amend hide move next prev query restack record reword smartlog submit sync test undo unhide' -a 'amend'"'"'	Amend the current HEAD commit'"'"'
''hide'"'"'	Hide the provided commits from the smartlog'"'"'
''move'"'"'	Move a subtree of commits from one location to another'"'"'
''next'"'"'	Move to a later commit in the current stack'"'"'
''prev'"'"'	Move to an earlier commit in the current stack'"'"'
''query'"'"'	Query the commit graph using the "revset" language and print matching commits'"'"'
''restack'"'"'	Fix up commits abandoned by a previous rewrite operation'"'"'
''record'"'"'	Create a commit by interactively selecting which changes to include'"'"'
''reword'"'"'	Reword commits'"'"'
''smartlog'"'"'	`smartlog` command'"'"'
''submit'"'"'	Push commits to a remote'"'"'
''sync'"'"'	Move any local commit stacks on top of the main branch'"'"'
''test'"'"'	Run a command on each commit in a given set and aggregate the results'"'"'
''undo'"'"'	Browse or return to a previous state of the repository'"'"'
''unhide'"'"'	Unhide previously-hidden commits from the smartlog'"'"'
'
complete -c git -f --condition "__fish_seen_subcommand_from amend" -a '(_myfish_complete_subcommand --fcs-set-argv0="git__amend")' 
complete -c git -f --condition "__fish_seen_subcommand_from hide" -a '(_myfish_complete_subcommand --fcs-set-argv0="git__hide")' 
complete -c git -f --condition "__fish_seen_subcommand_from move" -a '(_myfish_complete_subcommand --fcs-set-argv0="git__move")' 
complete -c git -f --condition "__fish_seen_subcommand_from next" -a '(_myfish_complete_subcommand --fcs-set-argv0="git__next")' 
complete -c git -f --condition "__fish_seen_subcommand_from prev" -a '(_myfish_complete_subcommand --fcs-set-argv0="git__prev")' 
complete -c git -f --condition "__fish_seen_subcommand_from query" -a '(_myfish_complete_subcommand --fcs-set-argv0="git__query")' 
complete -c git -f --condition "__fish_seen_subcommand_from restack" -a '(_myfish_complete_subcommand --fcs-set-argv0="git__restack")' 
complete -c git -f --condition "__fish_seen_subcommand_from record" -a '(_myfish_complete_subcommand --fcs-set-argv0="git__record")' 
complete -c git -f --condition "__fish_seen_subcommand_from reword" -a '(_myfish_complete_subcommand --fcs-set-argv0="git__reword")' 
complete -c git -f --condition "__fish_seen_subcommand_from smartlog" -a '(_myfish_complete_subcommand --fcs-set-argv0="git__smartlog")' 
complete -c git -f --condition "__fish_seen_subcommand_from submit" -a '(_myfish_complete_subcommand --fcs-set-argv0="git__submit")' 
complete -c git -f --condition "__fish_seen_subcommand_from sync" -a '(_myfish_complete_subcommand --fcs-set-argv0="git__sync")' 
complete -c git -f --condition "__fish_seen_subcommand_from test" -a '(_myfish_complete_subcommand --fcs-set-argv0="git__test")' 
complete -c git -f --condition "__fish_seen_subcommand_from undo" -a '(_myfish_complete_subcommand --fcs-set-argv0="git__undo")' 
complete -c git -f --condition "__fish_seen_subcommand_from unhide" -a '(_myfish_complete_subcommand --fcs-set-argv0="git__unhide")' 

complete -c git__amend -f -s C  -d 'Change to the given directory before executing the rest of the program. (The option is called `-C` for symmetry with Git.)' -ra "(__fish_complete_directories)"
complete -c git__amend -f -s f -l force-rewrite -d 'Force moving public commits, even though other people may have access to those commits' 
complete -c git__amend -f  -l color -d 'Flag to force enable or disable terminal colors' -r -a 'auto'"'"'	Automatically determine whether to display colors from the terminal and environment variables. This is the default behavior'"'"'
''always'"'"'	Always display terminal colors'"'"'
''never'"'"'	Never display terminal colors'"'"'
'
complete -c git__amend -f  -l in-memory -d 'Only attempt to perform an in-memory rebase. If it fails, do not attempt an on-disk rebase' 
complete -c git__amend -f  -l on-disk -d 'Skip attempting to use an in-memory rebase, and try an on-disk rebase directly' 
complete -c git__amend -f  -l no-deduplicate-commits -d 'Don'"'"'t attempt to deduplicate commits. Normally, a commit with the same contents as another commit which has already been applied to the target branch is skipped. If set, this flag skips that check' 
complete -c git__amend -f -s m -l merge -d 'Attempt to resolve merge conflicts, if any. If a merge conflict occurs and this option is not set, the operation is aborted' 
complete -c git__amend -f  -l debug-dump-rebase-constraints -d 'Debugging option. Print the constraints used to create the rebase plan before executing it' 
complete -c git__amend -f  -l debug-dump-rebase-plan -d 'Debugging option. Print the rebase plan that will be executed before executing it' 
complete -c git__amend -f  -l reparent -d 'Modify the contents of the current HEAD commit, but keep all contents of descendant commits exactly the same (i.e. "reparent" them). This can be useful when applying formatting or refactoring changes' 
complete -c git__amend -f -s h -l help -d 'Print help (see a summary with '"'"'-h'"'"')' 

complete -c git__hide -f -s C  -d 'Change to the given directory before executing the rest of the program. (The option is called `-C` for symmetry with Git.)' -ra "(__fish_complete_directories)"
complete -c git__hide -f  -l hidden -d 'Include hidden commits in the results of evaluating revset expressions' 
complete -c git__hide -f  -l color -d 'Flag to force enable or disable terminal colors' -r -a 'auto'"'"'	Automatically determine whether to display colors from the terminal and environment variables. This is the default behavior'"'"'
''always'"'"'	Always display terminal colors'"'"'
''never'"'"'	Never display terminal colors'"'"'
'
complete -c git__hide -f  -l no-delete-branches -d 'Don'"'"'t delete branches that point to commits that would be hidden. (Those commits will remain visible as a result.)' 
complete -c git__hide -f -s r -l recursive -d 'Also recursively hide all visible children commits of the provided commits' 
complete -c git__hide -f -s h -l help -d 'Print help (see a summary with '"'"'-h'"'"')' 
complete -c git__hide -f -kra '(__fish_git_commits)'

complete -c git__move -f -s C  -d 'Change to the given directory before executing the rest of the program. (The option is called `-C` for symmetry with Git.)' -ra "(__fish_complete_directories)"
complete -c git__move -f -s s -l source -d 'The source commit to move. This commit, and all of its descendants, will be moved' -kra '(__fish_git_commits; __fish_git_branches)'
complete -c git__move -f -s b -l base -d 'A commit inside a subtree to move. The entire subtree, starting from the main branch, will be moved, not just the commits descending from this commit' -r -ka '(__fish_git_commits)'
complete -c git__move -f  -l color -d 'Flag to force enable or disable terminal colors' -r -a 'auto'"'"'	Automatically determine whether to display colors from the terminal and environment variables. This is the default behavior'"'"'
''always'"'"'	Always display terminal colors'"'"'
''never'"'"'	Never display terminal colors'"'"'
'
complete -c git__move -f -s x -l exact -d 'A set of specific commits to move. These will be removed from their current locations and any unmoved children will be moved to their nearest unmoved ancestor' -kra '(__fish_git_commits; __fish_git_branches)'
complete -c git__move -f -s d -l dest -d 'The destination commit to move all source commits onto. If not provided, defaults to the current commit' -kra '(__fish_git_commits; __fish_git_branches)'
complete -c git__move -f  -l hidden -d 'Include hidden commits in the results of evaluating revset expressions' 
complete -c git__move -f -s f -l force-rewrite -d 'Force moving public commits, even though other people may have access to those commits' 
complete -c git__move -f  -l in-memory -d 'Only attempt to perform an in-memory rebase. If it fails, do not attempt an on-disk rebase' 
complete -c git__move -f  -l on-disk -d 'Skip attempting to use an in-memory rebase, and try an on-disk rebase directly' 
complete -c git__move -f  -l no-deduplicate-commits -d 'Don'"'"'t attempt to deduplicate commits. Normally, a commit with the same contents as another commit which has already been applied to the target branch is skipped. If set, this flag skips that check' 
complete -c git__move -f -s m -l merge -d 'Attempt to resolve merge conflicts, if any. If a merge conflict occurs and this option is not set, the operation is aborted' 
complete -c git__move -f  -l debug-dump-rebase-constraints -d 'Debugging option. Print the constraints used to create the rebase plan before executing it' 
complete -c git__move -f  -l debug-dump-rebase-plan -d 'Debugging option. Print the rebase plan that will be executed before executing it' 
complete -c git__move -f -s F -l fixup -d 'Combine the moved commits and squash them into the destination commit' 
complete -c git__move -f -s I -l insert -d 'Insert the subtree between the destination and it'"'"'s children, if any. Only supported if the moved subtree has a single head' 
complete -c git__move -f -s h -l help -d 'Print help (see a summary with '"'"'-h'"'"')' 

complete -c git__next -f -s a -l all -d 'Traverse as many commits as possible' 
complete -c git__next -f -s C  -d 'Change to the given directory before executing the rest of the program. (The option is called `-C` for symmetry with Git.)' -ra "(__fish_complete_directories)"
complete -c git__next -f -s b -l branch -d 'Move the specified number of branches rather than commits' 
complete -c git__next -f  -l color -d 'Flag to force enable or disable terminal colors' -r -a 'auto'"'"'	Automatically determine whether to display colors from the terminal and environment variables. This is the default behavior'"'"'
''always'"'"'	Always display terminal colors'"'"'
''never'"'"'	Never display terminal colors'"'"'
'
complete -c git__next -f -s o -l oldest -d 'When encountering multiple next commits, choose the oldest' 
complete -c git__next -f -s n -l newest -d 'When encountering multiple next commits, choose the newest' 
complete -c git__next -f -s i -l interactive -d 'When encountering multiple next commits, interactively prompt which to advance to' 
complete -c git__next -f -s m -l merge -d 'If the local changes conflict with the destination commit, attempt to merge them' 
complete -c git__next -f -s f -l force -d 'If the local changes conflict with the destination commit, discard them. (Use with caution!)' 
complete -c git__next -f -s h -l help -d 'Print help (see a summary with '"'"'-h'"'"')' 
complete -c git__next -f -r

complete -c git__prev -f -s a -l all -d 'Traverse as many commits as possible' 
complete -c git__prev -f -s C  -d 'Change to the given directory before executing the rest of the program. (The option is called `-C` for symmetry with Git.)' -ra "(__fish_complete_directories)"
complete -c git__prev -f -s b -l branch -d 'Move the specified number of branches rather than commits' 
complete -c git__prev -f  -l color -d 'Flag to force enable or disable terminal colors' -r -a 'auto'"'"'	Automatically determine whether to display colors from the terminal and environment variables. This is the default behavior'"'"'
''always'"'"'	Always display terminal colors'"'"'
''never'"'"'	Never display terminal colors'"'"'
'
complete -c git__prev -f -s o -l oldest -d 'When encountering multiple next commits, choose the oldest' 
complete -c git__prev -f -s n -l newest -d 'When encountering multiple next commits, choose the newest' 
complete -c git__prev -f -s i -l interactive -d 'When encountering multiple next commits, interactively prompt which to advance to' 
complete -c git__prev -f -s m -l merge -d 'If the local changes conflict with the destination commit, attempt to merge them' 
complete -c git__prev -f -s f -l force -d 'If the local changes conflict with the destination commit, discard them. (Use with caution!)' 
complete -c git__prev -f -s h -l help -d 'Print help (see a summary with '"'"'-h'"'"')' 
complete -c git__prev -f -r

complete -c git__query -f -s C  -d 'Change to the given directory before executing the rest of the program. (The option is called `-C` for symmetry with Git.)' -ra "(__fish_complete_directories)"
complete -c git__query -f  -l hidden -d 'Include hidden commits in the results of evaluating revset expressions' 
complete -c git__query -f -s b -l branches -d 'Print the branches attached to the resulting commits, rather than the commits themselves' 
complete -c git__query -f  -l color -d 'Flag to force enable or disable terminal colors' -r -a 'auto'"'"'	Automatically determine whether to display colors from the terminal and environment variables. This is the default behavior'"'"'
''always'"'"'	Always display terminal colors'"'"'
''never'"'"'	Never display terminal colors'"'"'
'
complete -c git__query -f -s r -l raw -d 'Print the OID of each matching commit, one per line. This output is stable for use in scripts' 
complete -c git__query -f -s h -l help -d 'Print help (see a summary with '"'"'-h'"'"')' 
complete -c git__query -f -r

complete -c git__restack -f -s C  -d 'Change to the given directory before executing the rest of the program. (The option is called `-C` for symmetry with Git.)' -ra "(__fish_complete_directories)"
complete -c git__restack -f  -l hidden -d 'Include hidden commits in the results of evaluating revset expressions' 
complete -c git__restack -f  -l color -d 'Flag to force enable or disable terminal colors' -r -a 'auto'"'"'	Automatically determine whether to display colors from the terminal and environment variables. This is the default behavior'"'"'
''always'"'"'	Always display terminal colors'"'"'
''never'"'"'	Never display terminal colors'"'"'
'
complete -c git__restack -f -s f -l force-rewrite -d 'Force moving public commits, even though other people may have access to those commits' 
complete -c git__restack -f  -l in-memory -d 'Only attempt to perform an in-memory rebase. If it fails, do not attempt an on-disk rebase' 
complete -c git__restack -f  -l on-disk -d 'Skip attempting to use an in-memory rebase, and try an on-disk rebase directly' 
complete -c git__restack -f  -l no-deduplicate-commits -d 'Don'"'"'t attempt to deduplicate commits. Normally, a commit with the same contents as another commit which has already been applied to the target branch is skipped. If set, this flag skips that check' 
complete -c git__restack -f -s m -l merge -d 'Attempt to resolve merge conflicts, if any. If a merge conflict occurs and this option is not set, the operation is aborted' 
complete -c git__restack -f  -l debug-dump-rebase-constraints -d 'Debugging option. Print the constraints used to create the rebase plan before executing it' 
complete -c git__restack -f  -l debug-dump-rebase-plan -d 'Debugging option. Print the rebase plan that will be executed before executing it' 
complete -c git__restack -f -s h -l help -d 'Print help (see a summary with '"'"'-h'"'"')' 
complete -c git__restack -f -kra '(__fish_git_commits)'

complete -c git__record -f -s C  -d 'Change to the given directory before executing the rest of the program. (The option is called `-C` for symmetry with Git.)' -ra "(__fish_complete_directories)"
complete -c git__record -f -s m -l message -d 'The commit message to use. If not provided, will be prompted to provide a commit message interactively' -r
complete -c git__record -f  -l color -d 'Flag to force enable or disable terminal colors' -r -a 'auto'"'"'	Automatically determine whether to display colors from the terminal and environment variables. This is the default behavior'"'"'
''always'"'"'	Always display terminal colors'"'"'
''never'"'"'	Never display terminal colors'"'"'
'
complete -c git__record -f -s i -l interactive -d 'Select changes to include interactively, rather than using the current staged/unstaged changes' 
complete -c git__record -f -s c -l create -d 'Create and switch to a new branch with the given name before committing' -r
complete -c git__record -f -s d -l detach -d 'Detach the current branch before committing' 
complete -c git__record -f -s I -l insert -d 'Insert the new commit between the current commit and its children, if any' 
complete -c git__record -f -s s -l stash -d 'After making the new commit, switch back to the previous commit' 
complete -c git__record -f -s h -l help -d 'Print help (see a summary with '"'"'-h'"'"')' 

complete -c git__reword -f -s C  -d 'Change to the given directory before executing the rest of the program. (The option is called `-C` for symmetry with Git.)' -ra "(__fish_complete_directories)"
complete -c git__reword -f  -l hidden -d 'Include hidden commits in the results of evaluating revset expressions' 
complete -c git__reword -f  -l color -d 'Flag to force enable or disable terminal colors' -r -a 'auto'"'"'	Automatically determine whether to display colors from the terminal and environment variables. This is the default behavior'"'"'
''always'"'"'	Always display terminal colors'"'"'
''never'"'"'	Never display terminal colors'"'"'
'
complete -c git__reword -f -s f -l force-rewrite -d 'Force rewording public commits, even though other people may have access to those commits' 
complete -c git__reword -f -s m -l message -d 'Message to apply to commits. Multiple messages will be combined as separate paragraphs, similar to `git commit`' -r
complete -c git__reword -f -s d -l discard -d 'Throw away the original commit messages.' 
complete -c git__reword -f  -l fixup -d 'A commit to "fix up". The reworded commits will become `fixup!` commits (suitable for use with `git rebase --autosquash`) targeting the supplied commit' -ka '(__fish_git_recent_commits)'
complete -c git__reword -f -s h -l help -d 'Print help (see a summary with '"'"'-h'"'"')' 
complete -c git__reword -f -kra '(__fish_git_commits)'

complete -c git__smartlog -f -s C  -d 'Change to the given directory before executing the rest of the program. (The option is called `-C` for symmetry with Git.)' -ra "(__fish_complete_directories)"
complete -c git__smartlog -f  -l event-id -d 'The point in time at which to show the smartlog. If not provided, renders the smartlog as of the current time. If negative, is treated as an offset from the current event' -r
complete -c git__smartlog -f  -l color -d 'Flag to force enable or disable terminal colors' -r -a 'auto'"'"'	Automatically determine whether to display colors from the terminal and environment variables. This is the default behavior'"'"'
''always'"'"'	Always display terminal colors'"'"'
''never'"'"'	Never display terminal colors'"'"'
'
complete -c git__smartlog -f  -l reverse -d 'Print the smartlog in the opposite of the usual order, with the latest commits first' 
complete -c git__smartlog -f  -l exact -d 'Don'"'"'t automatically add HEAD and the main branch to the list of commits to present. They will still be added if included in the revset' 
complete -c git__smartlog -f  -l hidden -d 'Include hidden commits in the results of evaluating revset expressions' 
complete -c git__smartlog -f -s h -l help -d 'Print help (see a summary with '"'"'-h'"'"')' 
complete -c git__smartlog -f -kra '(__fish_git_commits; __fish_git_branches)'

complete -c git__submit -f -s C  -d 'Change to the given directory before executing the rest of the program. (The option is called `-C` for symmetry with Git.)' -ra "(__fish_complete_directories)"
complete -c git__submit -f  -l hidden -d 'Include hidden commits in the results of evaluating revset expressions' 
complete -c git__submit -f  -l color -d 'Flag to force enable or disable terminal colors' -r -a 'auto'"'"'	Automatically determine whether to display colors from the terminal and environment variables. This is the default behavior'"'"'
''always'"'"'	Always display terminal colors'"'"'
''never'"'"'	Never display terminal colors'"'"'
'
complete -c git__submit -f -s F -l forge -d 'The Git hosting provider to use, called a "forge". If not provided, an attempt will be made to automatically detect the forge used by the repository. If no forge can be detected, will fall back to the "branch" forge' -r -a 'branch'"'"'	Force-push branches to the default push remote. You can configure the default push remote with `git config remote.pushDefault <remote>`'"'"'
''github'"'"'	Force-push branches to the remote and create a pull request for each branch using the `gh` command-line tool. WARNING: likely buggy!'"'"'
''phabricator'"'"'	Submit code reviews to Phabricator using the `arc` command-line tool'"'"'
'
complete -c git__submit -f -s c -l create -d 'If there is no associated remote commit or code review object for a given local commit, create the remote object by pushing the local commit to the forge' 
complete -c git__submit -f -s d -l draft -d 'If the forge supports it, create code reviews in "draft" mode' 
complete -c git__submit -f -s m -l message -d 'If the forge supports it, an optional message to include with the create or update operation' -r
complete -c git__submit -f -s j -l jobs -d 'If the forge supports it, how many jobs to execute in parallel. The value `0` indicates to use all CPUs' -r
complete -c git__submit -f -s s -l strategy -d 'If the forge supports it and uses a tool that needs access to the working copy, what kind of execution strategy to use' -r -a 'working-copy'"'"'	Default. Run the tests in the working copy. This requires a clean working copy. This is useful if you want to reuse build artifacts in the current directory'"'"'
''worktree'"'"'	Run the tests in a separate worktree (managed by git-branchless). This is useful if you want to run tests in parallel, or if you want to run tests on a different commit without invalidating build artifacts in the current directory, or if you want to run tests while your working copy is dirty'"'"'
'
complete -c git__submit -f -s n -l dry-run -d 'Don'"'"'t push or create anything. Instead, report what would be pushed or created. (This may still trigger fetching information from the forge.)' 
complete -c git__submit -f -s h -l help -d 'Print help (see a summary with '"'"'-h'"'"')' 
complete -c git__submit -f -kra '(__fish_git_commits)'

complete -c git__sync -f -s C  -d 'Change to the given directory before executing the rest of the program. (The option is called `-C` for symmetry with Git.)' -ra "(__fish_complete_directories)"
complete -c git__sync -f -s p -l pull -d 'Run `git fetch` to update remote references before carrying out the sync' 
complete -c git__sync -f  -l color -d 'Flag to force enable or disable terminal colors' -r -a 'auto'"'"'	Automatically determine whether to display colors from the terminal and environment variables. This is the default behavior'"'"'
''always'"'"'	Always display terminal colors'"'"'
''never'"'"'	Never display terminal colors'"'"'
'
complete -c git__sync -f -s f -l force-rewrite -d 'Force moving public commits, even though other people may have access to those commits' 
complete -c git__sync -f  -l in-memory -d 'Only attempt to perform an in-memory rebase. If it fails, do not attempt an on-disk rebase' 
complete -c git__sync -f  -l on-disk -d 'Skip attempting to use an in-memory rebase, and try an on-disk rebase directly' 
complete -c git__sync -f  -l no-deduplicate-commits -d 'Don'"'"'t attempt to deduplicate commits. Normally, a commit with the same contents as another commit which has already been applied to the target branch is skipped. If set, this flag skips that check' 
complete -c git__sync -f -s m -l merge -d 'Attempt to resolve merge conflicts, if any. If a merge conflict occurs and this option is not set, the operation is aborted' 
complete -c git__sync -f  -l debug-dump-rebase-constraints -d 'Debugging option. Print the constraints used to create the rebase plan before executing it' 
complete -c git__sync -f  -l debug-dump-rebase-plan -d 'Debugging option. Print the rebase plan that will be executed before executing it' 
complete -c git__sync -f  -l hidden -d 'Include hidden commits in the results of evaluating revset expressions' 
complete -c git__sync -f -s h -l help -d 'Print help (see a summary with '"'"'-h'"'"')' 
complete -c git__sync -f -kra '(__fish_git_commits)'

complete -c git__test -f -s C  -d 'Change to the given directory before executing the rest of the program. (The option is called `-C` for symmetry with Git.)' -ra "(__fish_complete_directories)"
complete -c git__test -f  -l color -d 'Flag to force enable or disable terminal colors' -r -a 'auto'"'"'	Automatically determine whether to display colors from the terminal and environment variables. This is the default behavior'"'"'
''always'"'"'	Always display terminal colors'"'"'
''never'"'"'	Never display terminal colors'"'"'
'
complete -c git__test -f -s h -l help -d 'Print help (see a summary with '"'"'-h'"'"')' 
complete -c git__test -f --condition "not __fish_seen_subcommand_from "'clean run show fix help' -a 'clean'"'"'	Clean any cached test results'"'"'
''run'"'"'	Run a given command on a set of commits and present the successes and failures'"'"'
''show'"'"'	Show the results of a set of previous test runs'"'"'
''fix'"'"'	Run a given command on a set of commits and present the successes and failures'"'"'
''help'"'"'	Print this message or the help of the given subcommand(s)'"'"'
'
complete -c git__test -f --condition "__fish_seen_subcommand_from clean" -a '(_myfish_complete_subcommand --fcs-set-argv0="git__test__clean")' 
complete -c git__test -f --condition "__fish_seen_subcommand_from run" -a '(_myfish_complete_subcommand --fcs-set-argv0="git__test__run")' 
complete -c git__test -f --condition "__fish_seen_subcommand_from show" -a '(_myfish_complete_subcommand --fcs-set-argv0="git__test__show")' 
complete -c git__test -f --condition "__fish_seen_subcommand_from fix" -a '(_myfish_complete_subcommand --fcs-set-argv0="git__test__fix")' 
complete -c git__test -f --condition "__fish_seen_subcommand_from help" -a '(_myfish_complete_subcommand --fcs-set-argv0="git__test__help")' 

complete -c git__test__clean -f -s C  -d 'Change to the given directory before executing the rest of the program. (The option is called `-C` for symmetry with Git.)' -ra "(__fish_complete_directories)"
complete -c git__test__clean -f  -l hidden -d 'Include hidden commits in the results of evaluating revset expressions' 
complete -c git__test__clean -f  -l color -d 'Flag to force enable or disable terminal colors' -r -a 'auto'"'"'	Automatically determine whether to display colors from the terminal and environment variables. This is the default behavior'"'"'
''always'"'"'	Always display terminal colors'"'"'
''never'"'"'	Never display terminal colors'"'"'
'
complete -c git__test__clean -f -s h -l help -d 'Print help (see a summary with '"'"'-h'"'"')' 
complete -c git__test__clean -f -kra '(__fish_git_commits; __fish_git_branches)'

complete -c git__test__run -f -s C  -d 'Change to the given directory before executing the rest of the program. (The option is called `-C` for symmetry with Git.)' -ra "(__fish_complete_directories)"
complete -c git__test__run -f -s x -l exec -d 'An ad-hoc command to execute on each commit' -r
complete -c git__test__run -f -s c -l command -d 'The test command alias for the command to execute on each commit. Set with `git config branchless.test.alias.<name> <command>`' -r
complete -c git__test__run -f  -l color -d 'Flag to force enable or disable terminal colors' -r -a 'auto'"'"'	Automatically determine whether to display colors from the terminal and environment variables. This is the default behavior'"'"'
''always'"'"'	Always display terminal colors'"'"'
''never'"'"'	Never display terminal colors'"'"'
'
complete -c git__test__run -f  -l hidden -d 'Include hidden commits in the results of evaluating revset expressions' 
complete -c git__test__run -f -s v -l verbose -d 'Show the test output as well' 
complete -c git__test__run -f -s s -l strategy -d 'How to execute the tests' -r -a 'working-copy'"'"'	Default. Run the tests in the working copy. This requires a clean working copy. This is useful if you want to reuse build artifacts in the current directory'"'"'
''worktree'"'"'	Run the tests in a separate worktree (managed by git-branchless). This is useful if you want to run tests in parallel, or if you want to run tests on a different commit without invalidating build artifacts in the current directory, or if you want to run tests while your working copy is dirty'"'"'
'
complete -c git__test__run -f -s S -l search -d 'Search for the first commit that fails the test command, rather than running on all commits' -r -a 'linear'"'"'	Visit commits starting from the earliest commit and exit early when a failing commit is found'"'"'
''reverse'"'"'	Visit commits starting from the latest commit and exit early when a passing commit is found'"'"'
''binary'"'"'	Visit commits starting from the middle of the commit graph and exit early when a failing commit is found'"'"'
'
complete -c git__test__run -f -s b -l bisect -d 'Shorthand for `--search binary`' 
complete -c git__test__run -f  -l no-cache -d 'Don'"'"'t read or write to the cache when executing the test commands' 
complete -c git__test__run -f -s i -l interactive -d 'Run the test command in the foreground rather than the background so that the user can interact with it' 
complete -c git__test__run -f -s j -l jobs -d 'How many jobs to execute in parallel. The value `0` indicates to use all CPUs' -r
complete -c git__test__run -f -s h -l help -d 'Print help (see a summary with '"'"'-h'"'"')' 
complete -c git__test__run -f -kra '(__fish_git_commits; __fish_git_branches)'

complete -c git__test__show -f -s C  -d 'Change to the given directory before executing the rest of the program. (The option is called `-C` for symmetry with Git.)' -ra "(__fish_complete_directories)"
complete -c git__test__show -f -s x -l exec -d 'An ad-hoc command to execute on each commit' -r
complete -c git__test__show -f -s c -l command -d 'The test command alias for the command to execute on each commit. Set with `git config branchless.test.alias.<name> <command>`' -r
complete -c git__test__show -f  -l color -d 'Flag to force enable or disable terminal colors' -r -a 'auto'"'"'	Automatically determine whether to display colors from the terminal and environment variables. This is the default behavior'"'"'
''always'"'"'	Always display terminal colors'"'"'
''never'"'"'	Never display terminal colors'"'"'
'
complete -c git__test__show -f  -l hidden -d 'Include hidden commits in the results of evaluating revset expressions' 
complete -c git__test__show -f -s v -l verbose -d 'Show the test output as well' 
complete -c git__test__show -f -s h -l help -d 'Print help (see a summary with '"'"'-h'"'"')' 
complete -c git__test__show -f -kra '(__fish_git_commits; __fish_git_branches)'

complete -c git__test__fix -f -s C  -d 'Change to the given directory before executing the rest of the program. (The option is called `-C` for symmetry with Git.)' -ra "(__fish_complete_directories)"
complete -c git__test__fix -f -s x -l exec -d 'An ad-hoc command to execute on each commit' -r
complete -c git__test__fix -f -s c -l command -d 'The test command alias for the command to execute on each commit. Set with `git config branchless.test.alias.<name> <command>`' -r
complete -c git__test__fix -f  -l color -d 'Flag to force enable or disable terminal colors' -r -a 'auto'"'"'	Automatically determine whether to display colors from the terminal and environment variables. This is the default behavior'"'"'
''always'"'"'	Always display terminal colors'"'"'
''never'"'"'	Never display terminal colors'"'"'
'
complete -c git__test__fix -f -s n -l dry-run -d 'Don'"'"'t rewrite any commits. Instead, just print a summary as usual' 
complete -c git__test__fix -f  -l hidden -d 'Include hidden commits in the results of evaluating revset expressions' 
complete -c git__test__fix -f -s v -l verbose -d 'Show the test output as well' 
complete -c git__test__fix -f -s s -l strategy -d 'How to execute the tests' -r -a 'working-copy'"'"'	Default. Run the tests in the working copy. This requires a clean working copy. This is useful if you want to reuse build artifacts in the current directory'"'"'
''worktree'"'"'	Run the tests in a separate worktree (managed by git-branchless). This is useful if you want to run tests in parallel, or if you want to run tests on a different commit without invalidating build artifacts in the current directory, or if you want to run tests while your working copy is dirty'"'"'
'
complete -c git__test__fix -f  -l no-cache -d 'Don'"'"'t read or write to the cache when executing the test commands' 
complete -c git__test__fix -f -s j -l jobs -d 'How many jobs to execute in parallel. The value `0` indicates to use all CPUs' -r
complete -c git__test__fix -f -s f -l force-rewrite -d 'Force moving public commits, even though other people may have access to those commits' 
complete -c git__test__fix -f  -l in-memory -d 'Only attempt to perform an in-memory rebase. If it fails, do not attempt an on-disk rebase' 
complete -c git__test__fix -f  -l on-disk -d 'Skip attempting to use an in-memory rebase, and try an on-disk rebase directly' 
complete -c git__test__fix -f  -l no-deduplicate-commits -d 'Don'"'"'t attempt to deduplicate commits. Normally, a commit with the same contents as another commit which has already been applied to the target branch is skipped. If set, this flag skips that check' 
complete -c git__test__fix -f -s m -l merge -d 'Attempt to resolve merge conflicts, if any. If a merge conflict occurs and this option is not set, the operation is aborted' 
complete -c git__test__fix -f  -l debug-dump-rebase-constraints -d 'Debugging option. Print the constraints used to create the rebase plan before executing it' 
complete -c git__test__fix -f  -l debug-dump-rebase-plan -d 'Debugging option. Print the rebase plan that will be executed before executing it' 
complete -c git__test__fix -f -s h -l help -d 'Print help (see a summary with '"'"'-h'"'"')' 
complete -c git__test__fix -f -kra '(__fish_git_commits; __fish_git_branches)'


complete -c git__undo -f -s C  -d 'Change to the given directory before executing the rest of the program. (The option is called `-C` for symmetry with Git.)' -ra "(__fish_complete_directories)"
complete -c git__undo -f -s i -l interactive -d 'Interactively browse through previous states of the repository before selecting one to return to' 
complete -c git__undo -f  -l color -d 'Flag to force enable or disable terminal colors' -r -a 'auto'"'"'	Automatically determine whether to display colors from the terminal and environment variables. This is the default behavior'"'"'
''always'"'"'	Always display terminal colors'"'"'
''never'"'"'	Never display terminal colors'"'"'
'
complete -c git__undo -f -s y -l yes -d 'Skip confirmation and apply changes immediately' 
complete -c git__undo -f -s h -l help -d 'Print help (see a summary with '"'"'-h'"'"')' 

complete -c git__unhide -f -s C  -d 'Change to the given directory before executing the rest of the program. (The option is called `-C` for symmetry with Git.)' -ra "(__fish_complete_directories)"
complete -c git__unhide -f  -l hidden -d 'Include hidden commits in the results of evaluating revset expressions' 
complete -c git__unhide -f  -l color -d 'Flag to force enable or disable terminal colors' -r -a 'auto'"'"'	Automatically determine whether to display colors from the terminal and environment variables. This is the default behavior'"'"'
''always'"'"'	Always display terminal colors'"'"'
''never'"'"'	Never display terminal colors'"'"'
'
complete -c git__unhide -f -s r -l recursive -d 'Also recursively unhide all children commits of the provided commits' 
complete -c git__unhide -f -s h -l help -d 'Print help (see a summary with '"'"'-h'"'"')' 
complete -c git__unhide -f -kra '(__fish_git_commits)'
